var Promise = require('bluebird'),
    AWS = require('aws-sdk'),
    config = require('@config'),
    extend = require('extend'),
    logger = require('@lib/logger')('kinesis'),
    kinesis = {};

kinesis.init = function () {
    return Promise.resolve(new AWS.Kinesis(
        extend({}, config.AWS, config.kinesis)
    ));
};

kinesis.pushEvent = function (data, stream, partition, sequence, kinesis) {
    return new Promise(function (resolve, reject) {
        kinesis.putRecord({
            'Data': JSON.stringify(data),
            'PartitionKey': String(partition),
            'StreamName': stream,
            'SequenceNumberForOrdering': String(sequence),
            'ExplicitHashKey': null
        }, function (err) {
            if (err) {
                return reject(err);
            }
            logger.info('Kinesis push done to ' + stream + ':');
            logger.info(data);
            return resolve();
        });
    });
};

kinesis.describeStream = function (stream, kinesis) {
    return new Promise(function (resolve, reject) {
        kinesis.describeStream({
            'StreamName': stream
        }, function (err, data) {
            if (err) {
                return reject(err);
            }
            return resolve(data && data.StreamDescription || {});
        });
    });
};

kinesis.splitShard = function (stream, kinesis) {
    return new Promise(function (resolve, reject) {
        kinesis.splitShard({
            'NewStartingHashKey': 'newStartingHashKey',
            'ShardToSplit': 'shardToSplit',
            'StreamName': stream
        }, function (err, data) {
            if (err) {
                return reject(err);
            }
            return resolve(data && data.StreamDescription || {});
        });
    });
};

module.exports = kinesis;
