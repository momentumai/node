var Promise = require('bluebird'),
    Item = require('@lib/resources/dynamodb/item'),
    AWS = require('aws-sdk'),
    config = require('@config'),
    logger = require('@lib/logger')('dynamodb'),
    extend = require('extend'),
    _ = require('lodash'),
    dynamo = {};

function get100 (table, items, db) {
    var params = {
            'RequestItems': {}
        },
        tableName = Item.getTable(config, table);

    params['RequestItems'][tableName] = {'Keys': []};

    items.forEach(function (item) {
        params['RequestItems'][tableName].Keys.push(
            Item.toAWS({
                'id': item.id,
                'range': item.range
            })
        );
    });

    return new Promise(function (resolve, reject) {
        var resp = [];

        function getItems (params, callback) {
            db.batchGetItem(params, function (err, data) {
                if (err) {
                    return callback(err);
                }

                if (data && data.Responses && data.Responses[tableName]) {
                    data.Responses[tableName].forEach(function (item) {
                        resp.push(Item.toObject({
                            'Item': item
                        }));
                    });
                }

                if (
                    data &&
                    data.UnprocessedKeys &&
                    Object.keys(data.UnprocessedKeys).length
                ) {
                    return getItems({
                        'RequestItems': data.UnprocessedKeys
                    }, callback);
                }

                return callback();
            });
        }

        getItems(params, function (err) {
            if (err) {
                return reject(err);
            }

            logger.info(resp);
            return resolve(resp);
        });
    });
}

function put25 (table, items, db) {
    var params = {
            'RequestItems': {}
        },
        tableName = Item.getTable(config, table);

    params['RequestItems'][tableName] = [];

    items.forEach(function (item) {
        params['RequestItems'][tableName].push(
            {
                'PutRequest': {
                    'Item': Item.toAWS(item)
                }
            }
        );
    });

    return new Promise(function (resolve, reject) {
        db.batchWriteItem(params, function (err) {
            if (err) {
                return reject(err);
            }
            return resolve();
        });
    });
}

dynamo.init = function () {
    logger.info('dynamodb init', extend({}, config.AWS, config.dynamodb));
    return Promise.resolve(new AWS.DynamoDB(
        extend({}, config.AWS, config.dynamodb)
    ));
};

dynamo.describeTable = function (table, dynamodb) {
    var params = {
        'TableName': table
    };

    return new Promise(function (resolve, reject) {
        dynamodb.describeTable(params, function (err, resp) {
            if (err) {
                return reject(err);
            }
            return resolve(resp);
        });
    });
};

dynamo.updateTable = function (table, update, dynamodb) {
    var params = {
        'TableName': table
    };

    params = extend(params, update);

    return new Promise(function (resolve, reject) {
        dynamodb.updateTable(params, function (err, resp) {
            if (err) {
                return reject(err);
            }
            return resolve(resp);
        });
    });
};

dynamo.putItem = function (table, item, db) {
    var params = {
        'TableName': Item.getTable(config, table),
        'Item': Item.toAWS(item)
    };

    logger.info('putItem into ' + params.TableName);
    logger.info(item);

    return new Promise(function (resolve, reject) {
        db.putItem(params, function (err) {
            if (err) {
                return reject(err);
            }
            return resolve();
        });
    });
};

dynamo.putItems = function (table, items, db) {
    var promises = [],
        i,
        j,
        temparray,
        chunk = 25;

    for (i = 0, j = items.length; i < j; i += chunk) {
        temparray = items.slice(i, i + chunk);
        promises.push(put25(table, temparray, db));
    }

    return Promise.all(promises);
};

dynamo.getItem = function (table, id, range, db) {
    var params = {
        'TableName': Item.getTable(config, table),
        'Key': Item.toAWS({
            'id': id,
            'range': range
        })
    };

    return new Promise(function (resolve, reject) {
        db.getItem(params, function (err, resp) {
            if (err) {
                return reject(err);
            }
            resp = Item.toObject(resp);
            logger.info(resp);
            return resolve(resp);
        });
    });
};

dynamo.getBatchItem = function (table, items, db) {
    var promises = [],
        i,
        j,
        temparray,
        chunk = 100;

    items = _.uniqBy(items, function (item) {
        return item.id + item.range;
    });

    for (i = 0, j = items.length; i < j; i += chunk) {
        temparray = items.slice(i, i + chunk);
        promises.push(get100(table, temparray, db));
    }

    return Promise.all(promises).then(function (response) {
        var ret = [];

        response.forEach(function (partition) {
            ret = ret.concat(partition);
        });

        return ret;
    });
};

dynamo.addOrUpdate = function (table, params, documentClient) {
    var req = {
        'TableName': Item.getTable(config, table),
        'Key': params.key,
        'UpdateExpression': null,
        'ExpressionAttributeNames': null,
        'ExpressionAttributeValues': null
    };

    function serialize () {
        var ret = {},
            keyToIndex = {},
            indexToKey = {},
            valueMap = {},
            expr = {
                'set': [],
                'add': []
            },
            exprOp = {
                'set': '=',
                'add': ''
            },
            expression = [],
            keyNames = Object.keys(
            params.set
        ).concat(
            Object.keys(params.add)
        );

        function getValues (type) {
            return function (key, i) {
                var indexKey = keyToIndex[key],
                    value = params[type][key],
                    valueKey = [
                        ':',
                        type,
                        i
                    ].join('');

                expr[type].push([
                    indexKey,
                    exprOp[type],
                    valueKey
                ].filter(function (part) {
                    return part;
                }).join(' '));

                valueMap[valueKey] = value;
            };
        }

        keyNames.forEach(function (key, i) {
            if (typeof keyToIndex[key] === 'undefined') {
                keyToIndex[key] = '#' + i;
                indexToKey['#' + i] = key;
            }
        });

        Object.keys(params.set).forEach(getValues('set'));
        Object.keys(params.add).forEach(getValues('add'));

        if (expr.set.length) {
            expression.push('SET ' + expr.set.join(', '));
        }

        if (expr.add.length) {
            expression.push('ADD ' + expr.add.join(', '));
        }

        ret['ExpressionAttributeNames'] = indexToKey;
        ret['ExpressionAttributeValues'] = valueMap;
        ret['UpdateExpression'] = expression.join(' ');

        return ret;
    }

    extend(req, serialize());

    return new Promise(function (resolve, reject) {
        documentClient.update(req, function (err, data) {
            if (err) {
                return reject(err);
            }
            resolve(data);
        });
    });
};

module.exports = dynamo;
