var config = require('@config'),
    path = require('path'),
    gcloud = require('gcloud'),
    Promise = require('bluebird'),
    uuid = require('uuid'),
    ds = {};

function getDataStore (namespace) {
    var cfg = {
        'projectId': config.google.projectId,
        'credentials': config.google.credentials
    };

    if (namespace) {
        cfg.namespace = String(namespace);
    }

    return gcloud.datastore(cfg);
}

ds.init = function (namespace) {
    return Promise.resolve().then(function () {
        return getDataStore(namespace);
    }).catch(function () {
        return ds.init(namespace);
    });
};

/**
 * get items
 *
 * Provides the ability to get items
 *
 * @param {string} kind
 *   Name of the Kind
 * @param {array} keys
 *   array of string. can be only one string, don't have to be array
 * @param {string} namespace
 *   optional namespace
 * @param {Datastore} datastore
 *   optional datastore instance
 */

ds.get = function (kind, keys, namespace, datastore) {
    var single = false;

    datastore = datastore || getDataStore(namespace);
    if (keys && !Array.isArray(keys)) {
        keys = [keys];
        single = true;
    }

    if (!keys || !keys.length) {
        return Promise.resolve([]);
    }

    return (new Promise(function (resolve, reject) {
        datastore.get(keys.reduce(function (prev, act) {
            prev.push(datastore.key([String(kind), String(act)]));
            return prev;
        }, []), function (err, resp) {
            if (err) {
                return reject(err);
            }

            if (single) {
                return resolve(resp && resp[0] && resp[0].data || null);
            }
            return resolve(resp || []);
        });
    })).catch(function (err) {
        if (err.code === 503) {
            return ds.get(kind, keys, namespace);
        }

        throw err;
    });
};

/**
 * update or insert items
 *
 * Provides the ability to upsert(update or insert) items
 *
 * @param {string} kind
 *   Name of the Kind
 * @param {array} data
 *   array of object. can be only one Object, don't have to be array
 *   the items of the array or the object has to be the following format:
 *     {
 *        'key': 'KeyOfTheItem',
 *        'data': {
 *            'update-param-1': 'new-value-1',
 *            'update-param-2': 'new-value-2',
 *        }
 *    }
 * @param {string} namespace
 *   optional namespace
 * @param {Datastore} datastore
 *   optional datastore instance
 */
ds.set = function (kind, data, namespace, datastore) {
    var model = require(path.join('@lib', 'model', 'datastore', kind));

    datastore = datastore || getDataStore(namespace);
    if (data && !Array.isArray(data)) {
        data = [data];
    }

    if (!data || !data.length) {
        return Promise.resolve([]);
    }

    return (new Promise(function (resolve, reject) {
        datastore.upsert(data.reduce(function (prev, act) {
            prev.push({
                'key': datastore.key(
                    [String(kind), String(act.key) || uuid.v4()]
                ),
                'data': Object.keys(act.data).reduce(function (prev, key) {
                    prev.push({
                        'name': key,
                        'value': act.data[key],
                        'excludeFromIndexes':
                            model.excludeIndexes.indexOf(key) !== -1
                    });
                    return prev;
                }, [])
            });
            return prev;
        }, []), function (err) {
            if (err) {
                console.error(err);
                return reject(err);
            }
            return resolve();
        });
    })).catch(function (err) {
        if (err.code === 503) {
            return ds.set(kind, data, namespace);
        }

        throw err;
    });
};

/**
 * Delete items
 *
 * Provides the ability to delete items
 *
 * @param {string} kind
 *   Name of the Kind
 * @param {array} keys
 *   array with the keys. can be only one String, don't have to be array
 * @param {string} namespace
 *   optional namespace
 * @param {Datastore} datastore
 *   optional datastore instance
 */
ds.delete = function (kind, keys, namespace, datastore) {
    datastore = datastore || getDataStore(namespace);

    if (keys && !Array.isArray(keys)) {
        keys = [keys];
    }

    if (!keys || !keys.length) {
        return Promise.resolve([]);
    }

    return (new Promise(function (resolve, reject) {
        datastore.delete(keys.map(function (key) {
            return datastore.key([String(kind), String(key)]);
        }), function (err) {
            if (err) {
                console.error(err);
                return reject(err);
            }
            return resolve();
        });
    })).catch(function (err) {
        if (err.code === 503) {
            return ds.delete(kind, keys, namespace);
        }

        throw err;
    });
};

/**
 * Runs a query
 *
 * Provides the ability to run a query
 * It will run through the queryFunction.
 *
 * @param {string} kind
 *   Name of the Kind
 * @param {function} queryFunction
 *   params for the function:
 *                {Query} query the query
 *                {Datastore} datastore the datastore instance
 * @param {string} namespace
 *   optional namespace
 * @param {Datastore} datastore
 *   optional datastore instance
 */
ds.query = function (kind, queryFunction, namespace, datastore) {
    datastore = datastore || getDataStore(namespace);

    return (new Promise(function (resolve, reject) {
        datastore.runQuery(
            queryFunction(datastore.createQuery(kind), datastore),
            function (err, resp) {
                if (err) {
                    return reject(err);
                }

                return resolve(resp || null);
            }
        );
    })).catch(function (err) {
        if (err.code === 503) {
            return ds.runQuery(kind, queryFunction, namespace);
        }

        throw err;
    });
};
/**
 * Updates an item transactionally
 *
 * Provides the ability to extend an item.
 * It will run through the updateFunction.
 *
 * @param {string} kind
 *   Name of the Kind
 * @param {string} key
 *   Key of the array
 * @param {function} updateFunction
 *   params for the function:
 *                {object} data data of the item,
 *                {Key} key key of the item,
 * @param {string} namespace
 *   optional namespace
 * @param {Datastore} datastore
 *   optional datastore instance
 */
ds.extend = function (kind, key, updateFunction, namespace, datastore) {
    var transaction,
        model = require(path.join('@lib', 'model', 'datastore', kind));

    datastore = datastore || getDataStore(namespace);
    transaction = datastore.transaction();

    if (!key) {
        return Promise.resolve([]);
    }
    return new Promise(function (resolve, reject) {
        transaction.run(function (err) {
            if (err) {
                return reject(err);
            }
            transaction.get([
                datastore.key([String(kind), String(key)])
            ], function (err, resp) {
                var item;

                if (err) {
                    return transaction.rollback(function (getError) {
                        return reject(getError || err);
                    });
                }

                item = resp && resp[0];
                if (item && item.key) {
                    item.data = updateFunction(item.data || {}, item.key);
                    item.data = Object.keys(item.data)
                        .reduce(function (prev, act) {
                            prev.push({
                                'name': act,
                                'value': item.data[act],
                                'excludeFromIndexes':
                                    model.excludeIndexes.indexOf(act) !== -1
                            });
                            return prev;
                        }, []);
                }

                transaction.save(item);
                transaction.commit(function (err) {
                    if (err) {
                        return reject(err);
                    }
                    return resolve(item.data);
                });
            });
        });
    });
};

module.exports = ds;
