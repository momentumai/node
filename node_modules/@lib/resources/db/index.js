var Promise = require('bluebird'),
    extend = require('extend'),
    mysql = require('mysql'),
    config = require('@config'),
    logger = require('@lib/logger')('database'),
    handlebars = require('handlebars'),
    db = {};

handlebars.registerHelper('inc', function (number) {
    return number + 1;
});

db.escape = function (val) {
    if (!val) {
        return '';
    }

    val = String(val);
    // eslint-disable-next-line no-control-regex
    val = val.replace(/[\0\n\r\b\t\\\'\"\x1a]/g, function (s) {
        switch (s) {
        case '\0':
            return '\\0';
        case '\n':
            return '\\n';
        case '\r':
            return '\\r';
        case '\b':
            return '\\b';
        case '\t':
            return '\\t';
        case '\x1a':
            return '\\Z';
        default:
            return '\\' + s;
        }
    });

    return val;
};

db.createPool = function (conf) {
    var cp = new Promise(function (resolve, reject) {
        var pool;

        try {
            pool = mysql.createPool(extend({}, config.db, conf));
            logger.debug('Pool created');
            return resolve(pool);
        } catch (e) {
            return reject('Cannot create pool: ' + e);
        }
    });

    return cp;
};

db.destroyPool = function (pool) {
    return new Promise(function (resolve, reject) {
        pool.end(function (err) {
            if (err) {
                err = 'Cannot destroy connection: ' + err;
                return reject(err);
            }
            logger.debug('Pool destroyed');
            return resolve();
        });
    });
};

db.formatString = function (str) {
    var argumentType,
        args,
        arg;

    if (!arguments.length || arguments.length < 2) {
        return str;
    }

    argumentType = typeof arguments[1];

    args = (argumentType === 'string' || argumentType === 'number') ?
        Array.prototype.slice.apply(arguments, [1]) :
        (arguments[1] || []);

    for (arg in args) {
        if (args.hasOwnProperty(arg)) {
            str = str.replace(
                RegExp('\\{' + arg + '\\}', 'gi'), String(args[arg])
            );
        }
    }

    return str;
};

db.q = function (str, params, pool) {
    return new Promise(function (resolve, reject) {
        var query;

        pool.getConnection(function (err, connection) {
            if (err) {
                logger.error(err);
            }
            if (err && [
                'Error: connect ETIMEDOUT',
                'Error: Handshake inactivity timeout'
            ].indexOf(err.toString()) !== -1) {
                return db.q(str, params, pool);
            } else if (err) {
                return reject('Cannot create connection: ' + err);
            }

            query = handlebars.compile(
                str,
                {'noEscape': true}
            )(params);

            logger.info(query);

            connection.query(query, function (err, result) {
                connection.release();

                if (err && err.code === 'ER_LOCK_DEADLOCK') {
                    return db.q(str, params, pool);
                } else if (err) {
                    logger.error(
                        'SQL error: ',
                        handlebars.compile(str)(params));
                    return reject(err);
                }
                return resolve(result);
            });
        });
    });
};

db.query = function (str, params, pool) {
    return new Promise(function (resolve, reject) {
        var query;

        pool.getConnection(function (err, connection) {
            if (err && [
                'Error: connect ETIMEDOUT',
                'Error: Handshake inactivity timeout'
            ].indexOf(err.toString()) !== -1) {
                return db.query(str, params, pool);
            } else if (err) {
                return reject('Cannot create connection: ' + err);
            }

            query = db.formatString(str, params);

            logger.info(query);

            connection.query(query, function (err, result) {
                connection.release();

                if (err && err.code === 'ER_LOCK_DEADLOCK') {
                    return db.query(str, params, pool);
                } else if (err) {
                    logger.error('SQL error: ', db.formatString(str, params));
                    return reject(err);
                }
                return resolve(result);
            });
        });
    });
};

module.exports = db;
