var URL = require('url'),
    Promise = require('bluebird'),
    request = require('request'),
    extract = require('@lib/utils/unshorten'),
    memcached = require('@lib/resources/memcached'),
    content = {};

function validate (url) {
    var parsed = URL.parse(url),
        params = parsed.query;

    params = params && params.split('&').reduce(function (prev, act) {
        var args = act.split('=');

        if (args[0]) {
            if (args[1]) {
                prev[args[0]] = args[1];
            } else {
                prev[args[0]] = true;
            }
        }

        return prev;
    }, {});

    if (params && params['utm_m_medium'] === 'cpc') {
        return [parsed.host, parsed.pathname].join('');
    }

    return 'INVALID';
}

function parse (url) {
    if (url === 'INVALID') {
        return url;
    }

    return validate(url);
}

function get (teamId, accessToken, objectId, memc) {
    var apiUrl  = [
        'https://graph.facebook.com/v2.5/',
        objectId +
        '?fields=link' +
        '&access_token=',
        accessToken
    ].join('');

    return memcached.get({
        'team_id': teamId,
        'type': 'fb-obj-cache',
        'key': objectId
    }, memc).then(function (value) {
        if (value.url) {
            return value.url;
        }
        return new Promise(function (resolve, reject) {
            request.get(apiUrl, function (err, ignore, body) {
                var res = {};

                if (err) {
                    return reject(err);
                }
                try {
                    res = JSON.parse(body);
                } catch (e) {
                    //ignore;
                }

                if (res.link) {
                    extract(res.link, function (err, url, stack) {
                        if (!err && stack.length !== 10) {
                            return resolve(url);
                        }
                        resolve('INVALID');
                    });
                    return setTimeout(function () {
                        resolve('INVALID');
                    }, 10000);
                }
                resolve('INVALID');
            });
        }).then(function (url) {
            url = parse(url);
            return memcached.set({
                'team_id': teamId,
                'type': 'fb-obj-cache',
                'key': objectId,
                'value': {
                    'url': url
                },
                'lifetime': 86400
            }, memc).then(function () {
                return url;
            });
        });
    });
}

content.transform = function (teamId, accessToken, posts) {
    return memcached.init().then(function (memc) {
        var promises = {};

        Object.keys(posts).forEach(function (key) {
            promises[key] = get(teamId, accessToken, key, memc);
        });

        return Promise.props(promises);
    }).then(function (urlMap) {
        var res = {};

        Object.keys(urlMap).forEach(function (objectId) {
            if (urlMap[objectId] !== 'INVALID' && (
                    !res[urlMap[objectId]] ||
                    res[urlMap[objectId]].state !== 'paid'
                )
            ) {
                res[urlMap[objectId]] = {
                    'object_story_id': objectId,
                    'state': posts[objectId]
                };
            }
        });

        return res;
    });
};

module.exports = content;
