var path = require('path'),
    Promise = require('bluebird'),
    processor = require('./lib/processor/handler.js'),
    campaign = require('./lib/campaign/handler.js'),
    facebook = require('@lib/model/facebook'),
    content = require('./lib/content/handler.js'),
    logger = require('@lib/logger')('worker/crawler'),
    sqlUtils = require('@lib/utils/sql'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    db = require('@lib/resources/db');

function handleDatum (data) {
    var now = Date.now();

    logger.info('crawler started');

    return Promise.resolve().then(function () {
        if (data.type === 1) {
            throw 'Not supported';
        }

        return campaign.getLast100(now, data.access_token, data.asset_id);
    }).then(function (posts) {
        return content.transform(data.team_id, data.access_token, posts);
    }).then(function (posts) {
        return processor.process(data.team_id,  posts);
    }).then(function (resp) {
        return resp;
    });
}

function validate (data, pool) {
    return facebook.crawlerValidate(
        data.access_token,
        data.type,
        data.asset_id
    ).then(function (valid) {
        if (valid) {
            return 1;
        }

        return db.q(q['remove_crawler'], {
            'team_id': data.team_id,
            'user_id': data.user_id,
            'type': data.type,
            'asset_id': data.asset_id
        }, pool).then(function () {
            return 0;
        });
    });
}

function handler (event, context) {
    return validate(
        event,
        context.r.pool
    ).then(function (validated) {
        if (validated) {
            return handleDatum(event, context.r.pool);
        }
    });
}

module.exports = handler;
