var Promise = require('bluebird'),
    _ = require('lodash'),
    path = require('path'),
    rules = require(
        path.join(__dirname, 'rules')
    );

function rulesHandler (message, context, logger) {
    var modules = _.groupBy(message.rules, function (act) {
        return JSON.stringify(Object.keys(act).reduce(function (prev, key) {
            if (['id', 'name', 'definition'].indexOf(key) === -1) {
                prev[key] = act[key];
            }
            return prev;
        }, {}));
    });

    return Promise.props(
        Object.keys(modules).reduce(function (prev, act) {
            var params = JSON.parse(act);

            params.timestamp = message.timestamp;

            prev[act] = require(
                path.join(
                    __dirname,
                    'modules',
                    params.module
                )
            ).handler(params, context.r).catch(function (err) {
                logger.error(err);
                return [];
            });

            return prev;
        }, {})
    ).then(function (response) {
        return Promise.props(
            Object.keys(response).reduce(function (prev, act) {
                prev[act] = rules.getResult(
                    response[act],
                    modules[act]
                ).catch(function (err) {
                    logger.error(err);
                    return [];
                });
                return prev;
            }, {})
        );
    }).then(function (results) {
        return Promise.all(
            Object.keys(results).reduce(function (prev, act) {
                var params = JSON.parse(act),
                    executions;

                params.timestamp = message.timestamp;

                executions = results[act].reduce(function (prev, act) {
                    act.result.forEach(function (execution) {
                        prev[execution] = prev[execution] || {
                            'env': params,
                            'facts': []
                        };
                        prev[execution].facts.push(act);
                    });
                    return prev;
                }, {});

                prev.push(
                    Promise.props(
                        Object.keys(executions).reduce(function (prev, act) {
                            prev[act] = require(
                                path.join(
                                    __dirname,
                                    'executions',
                                    act
                                )
                            ).handler(
                                executions[act],
                                context.r
                            ).catch(function (err) {
                                logger.error(err);
                            });
                            return prev;
                        }, {})
                    )
                );

                return prev;
            }, [])
        );
    });
}

module.exports = rulesHandler;
