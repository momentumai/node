var path = require('path'),
    sqlUtils = require('@lib/utils/sql'),
    db = require('@lib/resources/db'),
    contentInfo = require('@lib/model/content/info'),
    Facebook = require('@lib/utils/facebook'),
    urlUtils = require('@lib/utils/url'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    Promise = require('bluebird');

function postOnFacebook (link, content, options, accessToken) {
    return Facebook.get(
        options.page_id + '?fields=access_token',
        accessToken
    ).then(function (res) {
        var endpoint = options.page_id + '/feed',
            params = {
                'link': link
            };

        return Facebook.post(endpoint, params, res['access_token']);
    });
}

function shareContent (env, fact, pool) {
    var local = {
            'options': null
        },
        promises = {};

    promises['options'] = db.q(q['get_options'], {
        'team_id': env.team_id,
        'rule_id': fact.rule_id
    }, pool).then(function (rows) {
        var ruleData = rows[0];

        local.accessToken = ruleData.access_token;

        try {
            local.options = JSON.parse(ruleData.options);
        } catch (ignore) {
            //ignore
        }

        if (!local.options) {
            throw 'No options';
        }
    });

    promises['content'] = contentInfo.get(
        env.team_id,
        fact.id
    ).then(function (content) {
        local.content = content;
    });

    return Promise.props(promises).then(function () {
        var url = urlUtils.addUTM(local.content.url, {
            'utm_source': local.options.utm_source || '',
            'utm_medium': local.options.utm_medium || '',
            'utm_campaign': local.options.utm_campaign || '',
            'utm_m_medium': 't',
            'utm_m_source': 'facebook'
        });

        return postOnFacebook(
            url,
            local.content,
            local.options,
            local.accessToken
        );
    }).then(function (res) {
        var params = {
            'to': env.timestamp,
            'content_id': fact.id,
            'team_id': env.team_id,
            'rule_id': fact.rule_id,
            'cat1': env.cat1,
            'cat2': env.cat2,
            'cat3': env.cat3,
            'promotion_id': res.id,
            'expire': Number(env.timestamp) + 24 * 3600
        };

        return db.q(q['share_add'], params, pool);
    });
}

module.exports.handler = function (event, context) {
    return Promise.all(
        event.facts.reduce(function (prev, act) {
            prev.push(shareContent(event.env, act, context.pool));
            return prev;
        }, [])
    );
};
