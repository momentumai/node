var path = require('path'),
    sqlUtils = require('@lib/utils/sql'),
    db = require('@lib/resources/db'),
    ga = require('@lib/utils/ga'),
    Facebook = require('@lib/utils/facebook'),
    fbCampaign = require('@lib/model/fb-campaign'),
    contentInfo = require('@lib/model/content/info'),
    extend = require('extend'),
    cryptoUtils = require('@lib/utils/crypto'),
    urlUtils = require('@lib/utils/url'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    Promise = require('bluebird');

function getTargeting (audience, adAccount, token) {
    var url = adAccount + '/saved_audiences?fields=name,id,targeting';

    return Facebook.get(url, token).then(function (res) {
        var targeting;

        (res.data || []).forEach(function (item) {
            if (item.id === audience) {
                targeting = item.targeting;
            }
        });

        return targeting || {};
    });
}

function createAdset (teamId, fbData, options, token, timestamp) {
    var url = options.ad_account + '/adsets',
        params = {
            'billing_event': 'LINK_CLICKS',
            'campaign_id': fbData.campaignId,
            'is_autobid': true,
            'lifetime_budget': Number(options.budget),
            'name': fbData.adName,
            'optimization_goal': 'LINK_CLICKS',
            'targeting': fbData.targeting,
            'end_time': Number(timestamp) +
                24 * 3600 * Number(options.max_duration)
        };

    return Facebook.post(url, params, token).then(function (adset) {
        return adset.id;
    });
}

function getContentCampaigns (teamId, contentId, pool) {
    return db.q(q['promote_get_campaign_count'], {
        'team_id': teamId,
        'content_id': contentId
    }, pool).then(function (rows) {
        return rows[0] && Number(rows[0].count) || 0;
    });
}

function getAdName (teamId, contentId, title, pool) {
    return getContentCampaigns(
        teamId,
        contentId,
        pool
    ).then(function (campaignCount) {
        return [
            '#',
            campaignCount + 1,
            ' AUTO ',
            title
        ].join('');
    });
}

function getAdCreative (
    teamId,
    contentId,
    content,
    options,
    accessToken,
    timestamp,
    title,
    pool
) {
    var token = cryptoUtils.randomString(8),
        local = {};

    return db.q(q['promote_insert_campaign'], {
        'team_id': teamId,
        'cat1': content.cats[0],
        'cat2': content.cats[1],
        'cat3': content.cats[2],
        'content_id': contentId,
        'created_at': timestamp,
        'adaccount': options.ad_account,
        'adset_id': '',
        'meta': JSON.stringify(options.meta),
        'token': token,
        'end_time': Number(timestamp) +
            24 * 3600 * Number(options.max_duration)
    }, pool).then(function (resp) {
        local.campaignId = resp.insertId;
    }).then(function () {
        var url = options.page_id + '?fields=access_token',
            link,
            post;

        link = urlUtils.addCampaignParams(content.url, local.campaignId, token);
        link = urlUtils.addUTM(link, {
            'utm_source': options.utm_source || '',
            'utm_medium': options.utm_medium || '',
            'utm_campaign': options.utm_campaign || ''
        });

        post = {
            'link': link,
            'name': content.title || content.url,
            'description': content.description || '',
            'caption': content.site_name || '',
            'published': false
        };

        if (content.image) {
            post.picture = content.image;
        }

        return Facebook.get(url, accessToken).then(function (res) {
            url = options.page_id + '/feed';
            return Facebook.post(url, post, res.access_token);
        });
    }).then(function (res) {
        var params = {
                'name': 'Momentum ' + title,
                'object_story_id': res.id
            },
            url;

        url = options.ad_account + '/adcreatives';

        return Facebook.post(url, params, accessToken);
    }).then(function (res) {
        return {
            'adcreativeId': res.id,
            'cToken': token,
            'cId': local.campaignId
        };
    });
}

function createAd (fbData, options, accessToken) {
    var url = options.ad_account + '/ads',
        params = {
            'name': fbData.adName,
            'adset_id': fbData.adsetId,
            'creative': JSON.stringify({
                'creative_id': fbData.adcreativeId
            }),
            'status': 'ACTIVE'
        };

    return Facebook.post(url, params, accessToken);
}

function startPromotion (env, fact, pool) {
    var local = {
            'options': null
        },
        promises = {},
        fbData = {};

    promises['options'] = db.q(q['promote_get_options'], {
        'team_id': env.team_id,
        'rule_id': fact.rule_id
    }, pool).then(function (rows) {
        var ruleData = rows[0];

        local.accessToken = ruleData.access_token;

        try {
            local.options = JSON.parse(ruleData.options);
        } catch (ignore) {
            //ignore
        }

        if (!local.options) {
            throw 'No options';
        }
    });

    promises['content'] = contentInfo.get(
        env.team_id,
        fact.id
    ).then(function (content) {
        local.content = content;
    });

    return Promise.props(promises).then(function () {
        var promises = {},
            shortTitle;

        shortTitle = [
            local.content.title.substr(0, 64),
            (local.content.title.length > 64) ? '...' : ''
        ].join('');

        promises['campaign'] = fbCampaign.addGet(
            env.team_id,
            local.content.cats,
            local.options.ad_account,
            {
                'token': local.accessToken
            },
            pool
        ).then(function (campaignId) {
            fbData.campaignId = campaignId;
        });

        promises['targeting'] = getTargeting(
            local.options.audience,
            local.options.ad_account,
            local.accessToken
        ).then(function (targeting) {
            fbData.targeting = targeting;
        });

        promises['ad_name'] = getAdName(
            env.team_id,
            fact.id,
            shortTitle,
            pool
        ).then(function (adName) {
            fbData.adName = adName;
        });

        promises['ad_creative'] = getAdCreative(
            env.team_id,
            fact.id,
            local.content,
            local.options,
            local.accessToken,
            env.timestamp,
            shortTitle,
            pool
        ).then(function (res) {
            extend(fbData, res);
        });

        return Promise.props(promises);
    }).then(function () {
        return createAdset(
            env.team_id,
            fbData,
            local.options,
            local.accessToken,
            env.timestamp
        ).then(function (adsetId) {
            fbData.adsetId = adsetId;
        });
    }).then(function () {
        return createAd(
            fbData,
            local.options,
            local.accessToken
        );
    }).then(function () {
        return Promise.all([
            db.q(q['promote_update_campaign'], {
                'team_id': env.team_id,
                'id': fbData.cId,
                'token': fbData.cToken,
                'adset_id': fbData.adsetId
            }, pool),
            Promise.resolve().then(function () {
                var params = {
                    'to': env.timestamp,
                    'content_id': fact.id,
                    'team_id': env.team_id,
                    'cat1': env.cat1,
                    'cat2': env.cat2,
                    'cat3': env.cat3,
                    'promotion_id': fbData.adsetId,
                    'campaign_id': fbData.cId,
                    'expire': Number(env.timestamp) +
                        24 * 3600 * Number(local.options.max_duration)
                };

                return db.q(q['promote_add'], params, pool).then(function () {
                    return ga.sendPromotion(
                        env.team_id,
                        local.options.budget,
                        local.options.meta.offset,
                        local.options.meta.currency,
                        1
                    );
                });
            })
        ]);
    });
}

module.exports.handler = function (event, context) {
    return Promise.all(
        event.facts.reduce(function (prev, act) {
            prev.push(startPromotion(event.env, act, context.pool));
            return prev;
        }, [])
    );
};
