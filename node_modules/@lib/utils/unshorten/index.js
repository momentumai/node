var http = require('http'),
    https = require('https'),
    parse = require('url').parse,
    resolve = require('url').resolve,
    logger = require('@lib/logger')('unshorten'),
    supportedRegex = /^https?:$/;

function extract (url, stack, callback) {
    var parsed,
        secure,
        agent,
        options,
        req;

    switch (arguments.length) {
    case 2:
        callback = stack;
        stack = [];
        break;
    case 3:
        break;
    default:
        throw new TypeError('url and callback required.');
    }

    parsed = parse(url);

    if (!supportedRegex.test(parsed.protocol)) {
        return callback(new Error('Unsupported protocol.'), null, stack);
    }

    secure = parsed.protocol === 'https:';
    agent = secure ? https : http;

    options = {
        'hostname': parsed.hostname,
        'port': parsed.port || (secure ? 443 : 80),
        'path': parsed.path,
        'method': 'HEAD',
        'headers': {
            'host': parsed.hostname,
            'user-agent': extract.userAgent,
            'accept': '*/*',
            'accept-encoding': 'gzip,deflate'
        }
    };

    req = agent.request(options, function (res) {
        var location = res.headers.location;

        req.abort();

        if (location) {
            location = resolve(url, location);
            logger.debug(
                stack.length,
                'redirect detected:',
                url,
                '->',
                location
            );

            stack.push(location);
            if (stack.length >= extract.maxDepth) {
                return callback(null, null, stack);
            }
            return extract(location, stack, callback); // recursive
        }

        logger.debug(
            stack.length,
            'redirect finished:',
            url
        );
        callback(null, url, stack);
    });

    req.once('error', function (err) {
        callback(err, null, stack);
    });

    req.end();
}

extract.maxDepth = 10;

extract.userAgent = 'Googlebot';

module.exports = extract;
