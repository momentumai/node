var crypto = require('crypto'),
    bignum = require('bignum'),
    config = require('@config');

module.exports = {
    'randomString': function (length, chars) {
        var rnd,
            value,
            len,
            i;

        chars = chars ||
            'abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ0123456789';
        rnd = crypto.randomBytes(length);
        value = new Array(length);
        len = chars.length;

        for (i = 0; i < length; i++) {
            value[i] = chars[rnd[i] % len];
        }

        return value.join('');
    },
    'decryptHash': function (encrypted) {
        var decrypted,
            hashArray,
            encryptedHash,
            ret = {},
            params,
            param,
            i;

        if (!encrypted) {
            return null;
        }

        hashArray = encrypted.split('?');
        encryptedHash = hashArray[0];
        ret.encryptedHash = hashArray[0];
        decrypted = new Buffer(
            encryptedHash.replace('-', '+').replace('_', '/'), 'base64'
        ).toString('hex');

        decrypted = bignum(decrypted, 16).toString(10);
        ret.hash = decrypted;
        ret.id = String(decrypted.substring(3, decrypted.length - 2));
        ret.generation = String(
            decrypted.substring(decrypted.length - 2, decrypted.length)
        );
        ret.params = {};

        if (hashArray.length > 1) {
            params = hashArray[1].split('&');
            for (i = 0; i < params.length; i += 1) {
                param = params[i].split('=');
                ret.params[param[0]] = param[1] || 1;
            }
        }

        return ret;
    },
    'encryptHash': function (hash, generation) {
        var a = String(Math.floor(Math.random() * 900 + 100)),
            b = String(Math.min(99, Number(generation))),
            number;

        if (b.length === 1) {
            b = '0' + b;
        }

        number = bignum(a + hash + b, 10).toString(16);

        return String(new Buffer(number, 'hex')
          .toString('base64')
          .replace('+', '-')
          .replace('/', '_')
          .replace(/\=/g, ''));
    },
    'encryptCookie': function (cookie) {
        var cipher,
            crypted;

        cookie = String(cookie);
        cipher = crypto.createCipher(
            'aes-256-ctr',
            config.encryption.cookiePassword
        );
        crypted = cipher.update(cookie, 'utf8', 'hex');
        crypted += cipher.final('hex');
        return String(crypted);
    },
    'decryptCookie': function (encrypted) {
        var decipher = crypto.createDecipher(
                'aes-256-ctr',
                config.encryption.cookiePassword
            ),
            dec = decipher.update(encrypted, 'hex', 'utf8');

        dec += decipher.final('utf8');
        return String(dec);
    },
    'encryptId': function (input) {
        var pwd = config.encryption.idPassword,
            m = crypto.createHash('md5'),
            key,
            iv,
            data,
            cipher,
            encrypted,
            encoded;

        m.update(pwd);
        key = m.digest('hex');
        m = crypto.createHash('md5');
        m.update(pwd + key);
        iv = m.digest('hex');
        data = new Buffer(input, 'utf8').toString('binary');
        cipher = crypto.createCipheriv('aes-256-cbc', key, iv.slice(0, 16));
        encrypted = cipher.update(data, 'binary') + cipher.final('binary');
        encoded = new Buffer(encrypted, 'binary').toString('base64');
        return String(encoded);
    },
    'decryptId': function (input) {
        var pwd = config.encryption.idPassword,
            edata,
            m,
            key,
            iv,
            decipher,
            decrypted,
            plaintext;

        // Convert urlsafe base64 to normal base64
        input = input.replace(/\-/g, '+').replace(/_/g, '/');
        // Convert from base64 to binary string
        edata = new Buffer(input, 'base64').toString('binary');

        // Create key from password
        m = crypto.createHash('md5');
        m.update(pwd);
        key = m.digest('hex');

        // Create iv from password and key
        m = crypto.createHash('md5');
        m.update(pwd + key);
        iv = m.digest('hex');

        // Decipher encrypted data
        decipher = crypto.createDecipheriv('aes-256-cbc', key, iv.slice(0, 16));
        decrypted = decipher.update(edata, 'binary') + decipher.final('binary');
        plaintext = new Buffer(decrypted, 'binary').toString('utf8');

        return String(plaintext);
    }
};
