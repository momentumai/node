var config = require('@config'),
    Promise = require('bluebird'),
    request = require('request'),
    extend = require('extend'),
    appendQuery = require('append-query'),
    facebook = {};

function escapeDot (str) {
    return str.replace(/:/g, '&#58;');
}

facebook.get = function (endpoint, accessToken) {
    var url = 'https://graph.facebook.com/v2.5/' + endpoint;

    accessToken = accessToken || '1';
    url = appendQuery(url, {'access_token': accessToken});

    return new Promise(function (resolve, reject) {
        request.get(url, function (err, ignore, body) {
            var res = {},
                errorMsg;

            if (err) {
                return reject(err);
            }

            try {
                res = JSON.parse(body);
            } catch (e) {
                //ignore;
            }

            if (res.error) {
                if (res.error.type === 'OAuthException') {
                    errorMsg = res.error.error_user_msg || res.error.message;
                    return reject('utils/facebook:405:' + escapeDot(errorMsg));
                }

                errorMsg = escapeDot(
                    res.error.error_user_msg || res.error.message
                );

                return reject('utils/facebook:400:' + errorMsg);
            }

            resolve(res);
        });
    });
};

facebook.post = function (endpoint, params, accessToken) {
    var url  = 'https://graph.facebook.com/v2.5/' + endpoint;

    params = extend({}, params, {
        'access_token': accessToken
    });

    return new Promise(function (resolve, reject) {
        request.post(url, {'form': params}, function (err, ignore, body) {
            var res = {},
                errorMsg;

            if (err) {
                return reject(err);
            }
            try {
                res = JSON.parse(body);
            } catch (e) {
                //ignore;
            }

            if (res.error) {
                if (res.error.type === 'OAuthException') {
                    errorMsg = res.error.error_user_msg || res.error.message;
                    return reject('utils/facebook:405:' + errorMsg);
                }
                errorMsg = res.error.error_user_msg || res.error.message;
                return reject('utils/facebook:400:' + errorMsg);
            }

            resolve(res);
        });
    });
};

function isImageExist(url) {
    if (!url) {
        return 0;
    }

    return new Promise(function (resolve, reject) {
        request.get(url, function (err) {
            if (err) {
                resolve(0);
            }
            resolve(1);
        });
    });

}

facebook.getOgData = function (url) {
    var content = {};

    url = 'http://' + url;
    return facebook.get(
        [
            url,
            '?fields=og_object{title,site_name,image,description}'
        ].join(''),
        [
            config.facebook.appId,
            config.facebook.secret
        ].join('|')
    ).then(function (res) {
        var og = {};

        if (res && res['og_object']) {
            og = res['og_object'];
        }

        content['site_name'] = og['site_name'];
        content['title'] = og['title'];
        content['description'] = og['description'];
        content['image'] = og['image'] &&
            og['image'].length &&
            og['image'][0]['url'];

        return isImageExist(content['image'] || '');
    }).then(function (image_exist){
        if (!image_exist) {
            delete content['image'];
        }

        return content;
    });
};

module.exports = facebook;
