var Promise = require('bluebird'),
    request = require('request'),
    extend = require('extend'),
    appendQuery = require('append-query'),
    cheerio = require('cheerio'),
    facebook = {};

function escapeDot (str) {
    return str.replace(/:/g, '&#58;');
}

facebook.get = function (endpoint, accessToken) {
    var url = 'https://graph.facebook.com/v2.5/' + endpoint;

    accessToken = accessToken || '1';
    url = appendQuery(url, {'access_token': accessToken});

    return new Promise(function (resolve, reject) {
        request.get(url, function (err, ignore, body) {
            var res = {},
                errorMsg;

            if (err) {
                return reject(err);
            }

            try {
                res = JSON.parse(body);
            } catch (e) {
                //ignore;
            }

            if (res.error) {
                if (res.error.type === 'OAuthException') {
                    errorMsg = res.error.error_user_msg || res.error.message;
                    return reject('utils/facebook:405:' + escapeDot(errorMsg));
                }

                errorMsg = escapeDot(
                    res.error.error_user_msg || res.error.message
                );

                return reject('utils/facebook:400:' + errorMsg);
            }

            resolve(res);
        });
    });
};

facebook.post = function (endpoint, params, accessToken) {
    var url  = 'https://graph.facebook.com/v2.5/' + endpoint;

    params = extend({}, params, {
        'access_token': accessToken
    });

    return new Promise(function (resolve, reject) {
        request.post(url, {'form': params}, function (err, ignore, body) {
            var res = {},
                errorMsg;

            if (err) {
                return reject(err);
            }
            try {
                res = JSON.parse(body);
            } catch (e) {
                //ignore;
            }

            if (res.error) {
                if (res.error.type === 'OAuthException') {
                    errorMsg = res.error.error_user_msg || res.error.message;
                    return reject('utils/facebook:405:' + errorMsg);
                }
                errorMsg = res.error.error_user_msg || res.error.message;
                return reject('utils/facebook:400:' + errorMsg);
            }

            resolve(res);
        });
    });
};

facebook.getOgData = function (url) {
    url = 'http://' + url;
    return new Promise(function (resolve, reject) {
        request.get(url, function (err, ignore, body) {
            var $,
                resp = {};

            if (err) {
                return reject(err);
            }
            $ = cheerio.load(body);
            resp.site_name = $('meta[property="og:site_name"]').attr('content');
            resp.title = $('meta[property="og:title"]').attr('content');
            resp.description = $('meta[property="og:description"]')
                .attr('content');
            resp.image = $('meta[property="og:image"]').attr('content');

            resolve(resp);
        });
    });
};

module.exports = facebook;
