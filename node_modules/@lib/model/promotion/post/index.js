var path = require('path'),
    Promise = require('bluebird'),
    db = require('@lib/resources/db'),
    ds = require('@lib/resources/datastore'),
    publicInfo = require('@lib/model/content/public-info'),
    sqlUtils = require('@lib/utils/sql'),
    Facebook = require('@lib/utils/facebook'),
    urlUtils = require('@lib/utils/url'),
    cryptoUtils = require('@lib/utils/crypto'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    post = {};

function addCampaign (
    teamId,
    cats,
    contentId,
    now,
    adaccount,
    fb,
    meta,
    endTime,
    pool
) {
    var token = cryptoUtils.randomString(8);

    return db.q(q['insert_campaign'], {
        'team_id': teamId,
        'cat1': cats[0],
        'cat2': cats[1],
        'cat3': cats[2],
        'content_id': contentId,
        'created_at': now,
        'adaccount': adaccount,
        'adset_id': '',
        'meta': JSON.stringify(meta),
        'token': token,
        'end_time': endTime
    }, pool).then(function (resp) {
        return {
            'token': token,
            'id': resp.insertId
        };
    });
}

function createAdCreative (teamId, settings, campaign, content, fb) {
    var url = settings.page_id + '?fields=access_token',
        local = {},
        post,
        utm = {
            'utm_source': settings.utm_source || '',
            'utm_medium': settings.utm_medium || '',
            'utm_campaign': settings.utm_campaign || ''
        },
        link;

    link = urlUtils.addCampaignParams(content.url, campaign.id, campaign.token);
    link = urlUtils.addUTM(link, utm);

    post = {
        'link': link,
        'message': settings.message,
        'name': settings.name,
        'description': settings.description,
        'caption': settings.caption,
        'published': false
    };

    if (settings.image) {
        post.picture = settings.image;
    }

    local.content_name = [
        content.title.substr(0, 64),
        (content.title.length > 64) ? '...' : ''
    ].join('');

    return Facebook.get(url, fb.token).then(function (resp) {
        url = settings.page_id + '/feed';
        return Facebook.post(url, post, resp.access_token);
    }).then(function (resp) {
        var params = {
            'name': 'Momentum ' + local.content_name,
            'object_story_id': resp.id
        };

        url = settings.ad_account + '/adcreatives';

        return Facebook.post(url, params, fb.token);
    });
}

function getContent (teamId, contentId) {
    var url = '';

    return ds.init(teamId).then(function (datastore) {
        var query = datastore.createQuery('Content');

        query.filter('content_id', contentId);

        return ds.runQuery(query, datastore).then(function (results) {
            url = results[0].key.name;
            return publicInfo.get(teamId, url);
        });
    }).then(function (ogdata) {
        ogdata.url = url;
        return ogdata;
    });
}

post.preview = function (teamId, contentId, pool, settings, context) {
    var creativeId,
        campaign,
        fb = context.fb,
        now = context.now;

    settings = settings || {};

    return Promise.all([
        getContent(teamId, contentId),
        addCampaign(
            teamId,
            ['NONE', 'NONE', 'NONE'],
            contentId,
            now,
            settings.ad_account,
            fb,
            settings.meta || {},
            settings.end_time || 0,
            pool
        )
    ]).then(function (resp) {
        var content = resp[0];

        campaign = resp[1];

        return createAdCreative(
            teamId,
            settings,
            campaign,
            content,
            fb
        );
    }).then(function (resp) {
        var url = resp.id + '/previews?ad_format=DESKTOP_FEED_STANDARD&' +
            'width=520&' +
            'height=280';

        creativeId = resp.id;
        if (!settings.skip) {
            return Facebook.get(url, fb.token).catch(function () {
                return Promise.delay(5000).then(function () {
                    return Facebook.get(url, fb.token);
                });
            });
        }
    }).then(function (resp) {
        return {
            'creative_id': creativeId,
            'preview': (settings.skip) ? '' : resp.data[0].body,
            'campaign': campaign
        };
    });
};

module.exports = post;
