var path = require('path'),
    Promise = require('bluebird'),
    db = require('@lib/resources/db'),
    sqlUtils = require('@lib/utils/sql'),
    Facebook = require('@lib/utils/facebook'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    toCSV = Promise.promisify(require('json2csv')),
    currency = require('currency-symbol-map'),
    ds = require('@lib/resources/datastore'),
    /* should be removed after campaign history properly migrated */
    defaultCurrency = 'GBP',
    promotion = {};

function getUndefined () {
    return;
}

function getExcelDate (d) {
    return ('00' + (d.getDate() + 1)).slice(-2) +
        '/' +
        ('00' + d.getMonth()).slice(-2) +
        '/' +
        d.getFullYear() +
        ' ' +
        ('00' + d.getHours()).slice(-2) +
        ':' +
        ('00' + d.getMinutes()).slice(-2) +
        ':' +
        ('00' + d.getSeconds()).slice(-2);
}

function viralLift (seed, viral) {
    if (!seed || !viral) {
        return 1;
    }

    return Math.round(
        (seed + viral) / seed * 100
    ) / 100;
}

function getAdSet (token, adsetId) {
    return Facebook.get([
        adsetId,
        '?fields=name,start_time,end_time,status,insights{total_actions,spend}'
    ].join(''), token).catch(function () {
        return {};
    });
}

function getCampaignsCount (teamId, userId, contentId, cats, pool) {
    return db.q(q['get_campaigns_count'], {
        'team_id': teamId,
        'user_id': userId,
        'cats': cats,
        'content_id': contentId
    }, pool).then(function (rows) {
        return rows[0] && Number(rows[0].count) || 0;
    });
}

function formatMoney (value, currencyId) {
    var symbol = currency.getSymbolFromCurrency(
            currencyId || defaultCurrency
        ),
        val;

    function round (number) {
        var num = Number(number) || 0;

        if (num < 1) {
            return num.toPrecision(2);
        }

        return num.toPrecision(3);
    }

    if (value < 0) {
        return 'N/A';
    }

    val = round(value);

    return [
        symbol,
        val
    ].join('');
}

function getUrls (teamId, ids) {
    return ds.init(teamId).then(function (datastore) {
        var queries = {};

        ids.forEach(function (id) {
            var query = datastore.createQuery('Content');

            //query.select('content_id');
            query.filter('content_id', id);

            queries[id] = ds.runQuery(query, datastore).then(function (res) {
                if (res && res[0] && res[0]) {
                    return res[0].key.name;
                }
            });
        });

        return Promise.props(queries);
    });
}

function listCampaigns (
    teamId,
    userId,
    cId,
    cats,
    limit,
    offset,
    fb,
    filter,
    pool
) {
    var ret = {
        'data': {},
        'sum': 0
    };

    return db.q(q['list_campaigns'], {
        'team_id': teamId,
        'user_id': userId,
        'cats': cats,
        'limit': limit,
        'offset': offset,
        'content_id': cId,
        'filter': filter
    }, pool).then(function (rows) {
        var keys = [],
            ids = {};

        rows.forEach(function (row) {
            keys.push([teamId, row.id].join('||'));
            ids[row.content_id] = row.content_id;
        });

        return Promise.join(
            ds.getMulti(
                null,
                'HistoryCampaignModel',
                keys
            ),
            getUrls(teamId, Object.keys(ids)),
            function (response, urlMap) {
                var map = {};

                response.forEach(function (row) {
                    var id = row.key.name.split('||')[1],
                        value = JSON.parse(row.data.value);

                    map[id] = value;
                });

                rows.forEach(function (row) {
                    map[String(row.id)] = map[String(row.id)] || {};
                    row.seed = parseInt(map[String(row.id)].share) || 0;
                    row.url = urlMap[row.content_id] || getUndefined();
                });

                return rows;
            }
        );
    }).then(function (rows) {
        var promises = {};

        rows.forEach(function (row) {
            var meta = {
                'currency': defaultCurrency,
                'page': getUndefined(),
                'audience': getUndefined(),
                'adaccount': getUndefined()
            };

            ret.data[row.id] = {
                'id': row.id,
                'cId': row.content_id,
                'seed': row.seed,
                'viral': row.viral,
                'created_at': row.created_at,
                'active': false,
                'name': null,
                'url': row.url,
                'from': 0,
                'to': 0,
                'conversion': row.seed + row.viral,
                'click': 0,
                'landing': 0,
                'lift': viralLift(row.seed, row.viral),
                'cpa': 0,
                'spend': 0
            };

            try {
                meta = JSON.parse(row.meta) || meta;
            } catch (ignore) {
                //ignore
            }

            ret.data[row.id].meta = meta;

            promises[row.id] = getAdSet(fb.token, row.adset_id);
            ret.sum += 1;
        });

        return Promise.props(promises);
    }).then(function (adsets) {
        Object.keys(adsets).forEach(function (id) {
            var insights = adsets[id].insights &&
                adsets[id].insights.data &&
                adsets[id].insights.data[0] || {
                    'total_actions': 0,
                    'spend': 0
                },
                now = Math.floor(new Date().getTime() / 1000),
                isAvailable = Object.keys(adsets[id]).length;

            if (isAvailable) {
                ret.data[id].active = adsets[id].status === 'ACTIVE';

                ret.data[id].name = adsets[id].name;

                ret.data[id].from = Math.floor(new Date(
                    adsets[id].start_time
                ).getTime() / 1000);

                ret.data[id].to = Math.floor(new Date(
                    adsets[id].end_time
                ).getTime() / 1000);

                if (ret.data[id].to <= now) {
                    ret.data[id].active = false;
                }

                ret.data[id].click = insights.total_actions;

                ret.data[id].landing = insights.total_actions ?
                    ret.data[id].seed / insights.total_actions : -1;

                if (!insights.spend || !ret.data[id].conversion) {
                    ret.data[id].cpa = -1;
                } else {
                    ret.data[id].cpa = insights.spend / ret.data[id].conversion;
                }

                ret.data[id].spend = insights.spend;
            } else {
                delete ret.data[id];
            }
        });

        ret.data = Object.keys(
            ret.data
        ).reduce(function (prev, key) {
            prev.push(ret.data[key]);
            return prev;
        }, []).sort(function (a, b) {
            return b.created_at - a.created_at;
        });

        return ret;
    });
}

promotion.listCampaigns = function (context, event, pool) {
    var teamId = context.session.team_id,
        userId = context.session.user_id,
        cats = context.cats,
        fb = context.fb,
        contentId = event.content_id,
        limit = event.limit || 5,
        offset = event.offset || 0,
        promises = {},
        ret = {
            'data': {},
            'cnt': 0,
            'sum': 0,
            'offset': offset
        };

    promises.count = getCampaignsCount(teamId, userId, contentId, cats, pool);
    promises.list = listCampaigns(
        teamId,
        userId,
        contentId,
        cats,
        limit,
        offset,
        fb,
        null,
        pool
    );

    return Promise.props(promises).then(function (resp) {
        ret.cnt = resp.count || 0;
        ret.data = resp.list.data;
        ret.sum = resp.list.sum;

        ret.data.forEach(function (row) {
            row.spend = formatMoney(row.spend, row.meta.currency);
            row.cpa = formatMoney(row.cpa, row.meta.currency);
        });

        return ret;
    });
};

function getFilter (year, month) {
    var act = new Date(year, month, 0, 0, 0, 0, 0),
        next = new Date(act.getTime());

    next.setUTCMonth(next.getUTCMonth() + 1);

    return {
        'from': Math.floor(act.getTime() / 1000),
        'to': Math.floor((next.getTime() - 1) / 1000)
    };
}

promotion.export = function (context, event, pool) {
    var teamId = context.session.team_id,
        userId = context.session.user_id,
        cats = context.cats,
        fb = context.fb,
        contentId = event.content_id,
        filter = getFilter(
            event.year,
            event.month
        );

    return listCampaigns(
        teamId,
        userId,
        contentId,
        cats,
        null,
        null,
        fb,
        filter,
        pool
    ).then(function (res) {
        var fields = [
                'Name',
                'Url',
                'Ad Account',
                'Page',
                'Audience',
                'Currency',
                'Start',
                'End',
                'Conversion',
                'CPA',
                'Spent',
                'Click',
                'Lift',
                'Landing'
            ],
            data = [];

        res.data.forEach(function (act) {
            data.push({
                'Name': act.name,
                'Url': act.url,
                'Ad Account': act.meta.adaccount,
                'Page': act.meta.page,
                'Audience': act.meta.audience,
                'Currency': act.meta.currency,
                'Start': getExcelDate(new Date(act.from * 1000)),
                'End': getExcelDate(new Date(act.to * 1000)),
                'Conversion': act.conversion,
                'CPA': act.cpa === -1 ? getUndefined() : act.cpa,
                'Spent': act.spend,
                'Click': act.click,
                'Lift': act.lift,
                'Landing': act.landing === -1 ? getUndefined() : act.landing
            });
        });

        return toCSV({
            'data': data,
            'fields': fields,
            'newLine': '\n'
        });
    });
};

module.exports = promotion;
