var path = require('path'),
    Promise = require('bluebird'),
    db = require('@lib/resources/db'),
    ga = require('@lib/utils/ga'),
    sqlUtils = require('@lib/utils/sql'),
    contentInfo = require('@lib/model/content/info'),
    fbCampaign = require('@lib/model/fb-campaign'),
    authModel = require('@lib/model/auth'),
    preview = require('@lib/model/promotion/post'),
    Facebook = require('@lib/utils/facebook'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    promotion = {};

promotion.autoschedule = function (teamId, cats, contentId, pool) {
    return db.q(q['autoschedule'], {
        'team_id': teamId,
        'content_id': contentId,
        'cats': cats
    }, pool).then(function (rows) {
        var result = rows[0] || {};

        return (result.active) ? 'active' : 'inactive';
    });
};

function getSavedAudience (audience, adAccount, token) {
    var url = adAccount + '/saved_audiences?fields=name,id,targeting';

    return Facebook.get(url, token).then(function (res) {
        var targeting;

        (res.data || []).forEach(function (item) {
            if (item.id === audience) {
                targeting = item.targeting;
            }
        });

        return targeting || {};
    });
}

function createAdset (campaignName, campaignId, settings, fb) {
    var url = settings.ad_account + '/adsets',
        tomorrow = Math.floor((new Date()).getTime() / 1000 + 24 * 3600),
        endTime = settings.end_time,
        params = {
            'billing_event': 'LINK_CLICKS',
            'campaign_id': campaignId,
            'is_autobid': true,
            'lifetime_budget': Number(settings.budget),
            'name': campaignName,
            'optimization_goal': 'LINK_CLICKS'
        };

    if (settings.auto) {
        params.end_time = tomorrow;
    } else {
        params.end_time = endTime || tomorrow;
    }

    return Promise.resolve().then(function () {
        if (!settings.targeting) {
            return getSavedAudience(
                settings.audience,
                settings.ad_account,
                fb.token
            );
        }
    }).then(function (resp) {
        params.targeting = settings.targeting || resp;

        return Facebook.post(url, params, fb.token);
    });
}

function createAd (settings, local, fb) {
    var url = settings.ad_account + '/ads',
        params = {
            'name': local.name,
            'adset_id': local.adset_id,
            'creative': JSON.stringify({
                'creative_id': settings.creative_id
            }),
            'status': 'ACTIVE'
        };

    return Facebook.post(url, params, fb.token);
}

function getAlertId (userId, teamId, contentId, pool) {
    return authModel.getFilters(teamId, userId, pool).then(function (cats) {
        return db.q(q['autoschedule_id'], {
            'team_id': teamId,
            'content_id': contentId,
            'cats': cats
        }, pool);
    }).then(function (rows) {
        var result = rows[0] || {};

        return Number(result.id);
    });
}

function addAutoToAlert (alertId, promotion, campaign, pool) {
    return db.q(q['autoschedule_set'], {
        'id': alertId,
        'promotion_id': promotion,
        'campaign_id': Number(campaign) || 0
    }, pool);
}

function getContentCampaigns (teamId, contentId, pool) {
    return db.q(q['get_content_campaigns'], {
        'team_id': teamId,
        'content_id': contentId
    }, pool).then(function (rows) {
        return rows[0] && Number(rows[0].count) || 0;
    });
}

function saveCampaign (teamId, campaign, adset, pool) {
    return db.q(q['update_campaign'], {
        'team_id': teamId,
        'id': campaign.id,
        'token': campaign.token,
        'adset_id': adset
    }, pool);
}

function getContentCats (teamId, contentId, pool) {
    return db.q(q['get_content_cats'], {
        'team_id': teamId,
        'content_id': contentId
    }, pool).then(function (rows) {
        var cats = [];

        if (!rows[0] || !rows[0].cat1) {
            return cats;
        }
        cats.push(Number(rows[0].cat1));

        if (!rows[0].cat2) {
            return cats;
        }
        cats.push(Number(rows[0].cat2));

        if (!rows[0].cat3) {
            return cats;
        }
        cats.push(Number(rows[0].cat3));

        return cats;
    });
}

function sendGA (teamId, budget, campaignId, pool) {
    return db.q(q['get_campaign'], {
        'id': campaignId
    }, pool).then(function (rows) {
        var meta;

        if (!rows || !rows[0]) {
            return;
        }

        try {
            meta = JSON.parse(rows[0].meta);
        } catch (ignore) {
            return;
        }

        return ga.sendPromotion(
            teamId,
            budget,
            meta.offset,
            meta.currency,
            0
        );
    }).catch(function () {});
}

promotion.create = function (context, contentId, settings, pool) {
    var local = {},
        teamId = context.session.team_id,
        userId = context.session.user_id,
        fb = context.fb;

    return contentInfo.get(
        teamId,
        contentId
    ).then(function (content) {
        local.content = content;

        local.content_name = [
            content.title.substr(0, 64),
            (content.title.length > 64) ? '...' : ''
        ].join('');

        return getContentCampaigns(teamId, contentId, pool);
    }).then(function (count) {
        local.content_campaigns = count;

        return getAlertId(userId, teamId, contentId, pool);
    }).then(function (alert) {
        local.alert_id = alert;

        if (!alert) {
            settings.auto = 0;
        }

        local.name = [
            '#',
            local.content_campaigns + 1,
            ' ',
            settings.auto ? 'SEMI-AUTO' : 'MANUAL',
            ' ',
            local.content_name
        ].join('');

        return fbCampaign.addGet(
            teamId,
            ['NONE', 'NONE', 'NONE'],
            settings.ad_account,
            fb,
            pool
        );
    }).then(function (campaign) {
        local.campaign_id = campaign;
        return createAdset(
            local.name,
            local.campaign_id,
            settings,
            fb
        );
    }).then(function (adset) {
        local.adset_id = adset.id;

        return saveCampaign(teamId, settings.campaign, local.adset_id, pool);
    }).then(function () {
        return createAd(settings, local, fb);
    }).then(function (ad) {
        local.ad_id = ad;

        if (settings.auto) {
            return addAutoToAlert(
                local.alert_id,
                local.adset_id,
                settings.campaign.id,
                pool
            );
        }
    }).then(function () {
        return sendGA(teamId, settings.budget, settings.campaign.id, pool);
    }).then(function () {
        return 'success';
    });
};

function getEndtime (start, end, now) {
    var oldStart = new Date(start).getTime(),
        oldEnd = new Date(end).getTime(),
        diff = Math.floor((oldEnd - oldStart) / 1000);

    return now + diff;
}

promotion.clone = function (context, promotionId, pool) {
    var cSettings = {},
        pSettings = {},
        meta = {},
        endTime,
        teamId = context.session.team_id,
        fb = context.fb,
        contentId;

    return db.q(q['get_promotion'], {
        'team_id': teamId,
        'id': promotionId
    }, pool).then(function (rows) {
        var url = '';

        if (!rows[0] || !rows[0].adset_id) {
            throw 'model/promotion:400:Couldn\'t find promotion.';
        }

        contentId = rows[0].content_id;
        endTime = rows[0].end_time;

        try {
            meta = JSON.parse(rows[0].meta) || meta;
        } catch (ignore) {
            //ignore
        }

        url = [
            rows[0].adset_id,
            '?fields=id,name,campaign_id,',
            'lifetime_budget,start_time,end_time,',
            'targeting,adcreatives{object_story_id},account_id'
        ].join('');
        return Facebook.get(url, fb.token);
    }).then(function (resp) {
        var postId,
            url;

        cSettings = {
            'budget': Number(resp.lifetime_budget),
            'end_time': getEndtime(resp.start_time, resp.end_time, context.now),
            'ad_account': 'act_' + resp.account_id,
            'targeting': resp.targeting
        };

        postId = resp.adcreatives.data[0].object_story_id;
        url = postId + '?fields=message,name,picture,description,caption,from';

        return Facebook.get(url, fb.token);
    }).then(function (resp) {
        pSettings = {
            'message': resp.message,
            'name': resp.name,
            'picture': resp.picture,
            'description': resp.description,
            'caption': resp.caption,
            'page_id': resp.from.id,
            'ad_account': cSettings.ad_account,
            'skip': 1,
            'end_time': endTime
        };

        pSettings.meta = meta;

        cSettings.page = resp.from.id;

        return preview.preview(teamId, contentId, pool, pSettings, context);
    }).then(function (resp) {
        cSettings.creative_id = resp.creative_id;
        cSettings.campaign = resp.campaign;

        return promotion.create(context, contentId, cSettings, pool);
    });
};

promotion.stopPromotion = function (teamId, promotionId, campaign, pool) {
    return db.q(q['get_crawler'], {
        'team_id': teamId,
        'campaign': campaign
    }, pool).then(function (rows) {
        var token,
            params = {
                'status': 'PAUSED'
            };

        if (!rows[0] || !rows[0].token) {
            throw 'model/promotion:400:No crawler token:' + teamId;
        }

        token = rows[0].token;

        return Facebook.post(promotionId, params, token);
    });
};

promotion.endPromotion = function (teamId, promotionId, fb, pool) {
    return db.q(q['get_promotion'], {
        'team_id': teamId,
        'id': promotionId
    }, pool).then(function (rows) {
        var adset,
            params = {
                'status': 'PAUSED'
            };

        if (!rows[0] || !rows[0].adset_id) {
            throw 'model/promotion:400:Couldn\'t find promotion.';
        }

        adset = rows[0].adset_id;

        return Facebook.post(adset, params, fb.token);
    });
};

module.exports = promotion;
