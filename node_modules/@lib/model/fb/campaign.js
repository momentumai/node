var ds = require('@lib/resources/ds'),
    catUtils = require('@lib/utils/category'),
    Facebook = require('@lib/utils/facebook'),
    Promise = require('bluebird'),
    campaignModel = {};

function parseParams (p) {
    var params = {};

    params.team_id = p.team_id || 0;
    params.cats = p.cats || [];
    params.adaccount = p.adaccount || 'NONE';
    params.type = p.type || '';

    catUtils.extend(params.cats);

    return params;
}

function getNameText (type) {
    if (type === 'experiment') {
        return 'Experiment';
    }
}

function validateCampaign (campaign, token) {
    var url,
        params = {
            'status': 'ACTIVE'
        };

    if (!campaign || !campaign.key || !campaign.key.name) {
        return Promise.resolve(null);
    }

    url = campaign.key.name;

    return Facebook.post(url, params, token).then(function (resp) {
        if (resp && resp.success) {
            return campaign;
        }

        return null;
    }).catch(function () {
        return null;
    });
}

function getCampaignName (cats, type) {
    var name = ['Momentum'],
        pushedCat = false;

    if (getNameText(type)) {
        name.push(getNameText(type));
    }

    cats.forEach(function (cat) {
        if (cat !== 'NONE') {
            name.push(decodeURIComponent(cat));
            pushedCat = true;
        }
    });

    if (!pushedCat) {
        name.push('Global');
    }

    return name.join(' - ');
}

function createFbCampaign (name, adaccount, token) {
    var url = adaccount + '/campaigns',
        params = {
            'name': name,
            'objective': 'LINK_CLICKS',
            'status': 'ACTIVE'
        };

    return Facebook.post(url, params, token).then(function (resp) {
        return resp.id;
    });
}

function add (params, token) {
    catUtils.extend(params.cats);

    return createFbCampaign(
        getCampaignName(params.cats, params.type),
        params.adaccount,
        token
    ).then(function (resp) {
        return ds.set('FacebookCampaign', {
            'key': resp,
            'data': {
                'cat1': params.cats[0],
                'cat2': params.cats[1],
                'cat3': params.cats[2],
                'adaccount': params.adaccount,
                'created_at': new Date(),
                'type': params.type
            }
        }, params.team_id);
    });
}

campaignModel.addGet = function (params, token) {
    params = parseParams(params);

    return campaignModel.get(params, token).then(function (campaign) {
        if (!campaign) {
            return add(params, token);
        }
        return campaign;
    });
};

campaignModel.get = function (params, token) {
    params = parseParams(params);

    return ds.query('FacebookCampaign', function (query) {
        query.filter('cat1', params.cats[0]);
        query.filter('cat2', params.cats[1]);
        query.filter('cat3', params.cats[2]);
        query.filter('type', params.type);
        query.filter('adaccount', params.adaccount);
        return query;
    }, params.team_id).then(function (items) {
        return items && items[0] || null;
    }).then(function (campaign) {
        return validateCampaign(campaign, token);
    });
};

module.exports = campaignModel;
