var Promise = require('bluebird'),
    currency = require('@lib/model/promotion/currency'),
    getExperimentTest = require('@lib/model/experiment/test/get'),
    contentInfo = require('@lib/model/content/info'),
    extend = require('extend');

module.exports = function (params, items, token) {
    var experiments;

    return Promise.resolve().then(function () {
        var tests = items.reduce(function (prev, act) {
            prev = prev.concat(act.data.tests || []);
            return prev;
        }, []);

        experiments = items;
        return Promise.props({
            'tests': Promise.all(tests.map(function (test) {
                return getExperimentTest(test, token);
            })),
            'info': Promise.props(
                Object.keys(items.reduce(function (prev, act) {
                    prev[act.key.name] = '';
                    return prev;
                }, {})).reduce(function (prev, contentId) {
                    prev[contentId] = contentInfo.get(
                        params.team_id,
                        contentId
                    );
                    return prev;
                }, {})
            )
        });
    }).then(function (result) {
        var adaccounts = {};

        params.testsMap = result.tests.reduce(function (prev, act) {
            prev[act.experiment_id.name] = prev[act.experiment_id.name] || [];
            prev[act.experiment_id.name].push(act);
            if (act.adaccount) {
                adaccounts[act.adaccount] = '';
            }
            return prev;
        }, {});

        params.names = Object.keys(
            result.info
        ).reduce(function (prev, contentId) {
            prev[contentId] = result.info[contentId].title;
            return prev;
        }, {});

        return Promise.all(Object.keys(adaccounts).map(function (item) {
            return currency.get(token, 'act_' + item)
            .then(function (currencyResult) {
                return {
                    'adaccount': item,
                    'currency': currencyResult
                };
            });
        }));
    }).then(function (result) {
        var currencies = result.reduce(function (prev, act) {
            prev[act['adaccount']] = act['currency'];
            return prev;
        }, {});

        return experiments.map(function (item) {
            var tests = params.testsMap[item.key.name],
                ret = {};

            extend(ret, {
                'id': item.key.name,
                'name': params.names[item.key.name],
                'created_at': item.data.created_at,
                'updated_at': item.data.updated_at,
                'active': tests.reduce(function (prev, act) {
                    return prev || act.active || false;
                }, false),
                'fb_actions': tests.reduce(function (prev, act) {
                    return prev + (act.fb_actions || 0);
                }, 0),
                'click': tests.reduce(function (prev, act) {
                    return prev + act.click;
                }, 0),
                'latest_endtime': tests.reduce(function (prev, act) {
                    return prev > act.end_time ? prev : act.end_time;
                }, new Date(0)),
                'tests': tests.map(function (test) {
                    if (!test.has_permission) {
                        ret.permission_denied = true;
                        return {
                            'id': test.id,
                            'name': test.name,
                            'permission_denied': true
                        };
                    }

                    return {
                        'id': test.id,
                        'start_time': test.start_time,
                        'end_time': test.end_time,
                        'click': test.click,
                        'fb_actions': test.fb_actions,
                        'active': test.active,
                        'budget': currency.format(
                            test.budget,
                            currencies[test.adaccount]
                        ),
                        'spend': currency.format(
                            test.spend,
                            currencies[test.adaccount]
                        ),
                        'name': test.name,
                        'landing': test.click &&
                            test.fb_actions &&
                            test.click / test.fb_actions ||
                            -1,
                        'cpc': currency.format(
                            test.spend / test.fb_actions,
                            currencies[test.adaccount]
                        ),
                        'cpa': currency.format(
                            test.spend / test.click,
                            currencies[test.adaccount]
                        ),
                    };
                })
            });

            extend(ret, {
                'landing': ret.click &&
                    ret.fb_actions &&
                    ret.click / ret.fb_actions ||
                    -1
            });

            return ret;
        });
    });
};
