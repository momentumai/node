var catUtils = require('@lib/utils/category'),
    Promise = require('bluebird'),
    ds = require('@lib/resources/ds'),
    fbAdsetModel = require('@lib/model/fb/adset');

function parseParams (p) {
    var params = {};

    params.team_id = p.team_id || 0;
    params.cats = p.cats;

    params.content_id = p.content_id || '';
    params.limit = Number(p.limit) || 10;
    params.offset = p.offset || '';

    catUtils.extend(params.cats);

    return params;
}

function getDetails (item, params, token) {
    return fbAdsetModel.getDetails(
        item.data.adset,
        token
    ).then(function (resp) {
        return {
            'id': item.key.name,
            'name': item.data.name_text,
            'active': item.data.active,
            'end_time': item.data.end_time,
            'start_time': item.data.created_at,
            'content_id': item.data.content_id,
            'click': item.data.click,
            'budget_type': resp.budget_type,
            'budget': resp.budget,
            'spend': resp.spend,
            'total_actions': resp.total_actions
        };
    });
}

module.exports = function (params, token) {
    var resp = {};

    params = parseParams(params);

    return ds.query('Experiment', function (query) {
        if (params.content_id) {
            query.filter('content_id', params.content_id);
        } else if (params.cats[0] && params.cats[0] !== 'NONE') {
            query.filter('cat1', params.cats[0]);
            if (params.cats[1] && params.cats[1] !== 'NONE') {
                query.filter('cat2', params.cats[1]);
                if (params.cats[2] && params.cats[2] !== 'NONE') {
                    query.filter('cat3', params.cats[2]);
                }
            }
        }
        query.order('end_time', {'descending': true});
        query.limit(params.limit);
        if (params.offset) {
            query.start(params.offset);
        }
        return query;
    }, params.team_id).then(function (result) {
        if (result.nextQuery && result.nextQuery.endCursor) {
            resp.offset = result.nextQuery.endCursor;
        }
        return result.data;
    }).then(function (items) {
        return Promise.all(items.reduce(function (prev, act) {
            prev.push(getDetails(act, params, token));
            return prev;
        }, []));
    }).then(function (experiments) {
        resp.data = experiments;

        return resp;
    });
};
