var path = require('path'),
    db = require('@lib/resources/db'),
    sqlUtils = require('@lib/utils/sql'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    Stripe = require('stripe'),
    config = require('@config'),
    model = {};

function validateCustomer (customerId, stripe) {
    return stripe.customers.retrieve(customerId).then(function (resp) {
        return resp && resp.id || '';
    }).catch(function () {
        return '';
    });
}

function addCustomer (teamId, pool, stripe) {
    var customerId;

    return stripe.customers.create({}).then(function (resp) {
        customerId = resp.id;
        return db.q(q['update_stripe'], {
            'team_id': teamId,
            'stripe_id': customerId
        }, pool);
    }).then(function () {
        return customerId;
    });
}

function getCustomer (teamId, pool, stripe) {
    return db.q(q['get_stripe'], {
        'team_id': teamId
    }, pool).then(function (rows) {
        if (rows[0] && rows[0].stripe_id) {
            return validateCustomer(rows[0].stripe_id, stripe);
        }
        return '';
    }).then(function (customerId) {
        if (!customerId) {
            return addCustomer(teamId, pool, stripe);
        }
        return customerId;
    });
}

function getCustomerData (teamId, userId, pool) {
    return db.q(q['get_data'], {
        'team_id': teamId,
        'user_id': userId
    }, pool).then(function (rows) {
        var ret = {};

        ret.name = rows[0] && rows[0].name || '';
        ret.email = rows[0] && rows[0].email || '';
        ret.amount = rows[0] && Number(rows[0].payment_amount) || 0;

        return ret;
    });
}

function savePayment (teamId, pool) {
    return db.q(q['set_amount'], {
        'team_id': teamId
    }, pool).then(function () {
        return 'success';
    });
}

function pay (teamId, pool, amount, customerId, desc, meta, stripe) {
    var charge = {
        'amount': Math.round(amount * 100),
        'currency': 'gbp',
        'customer': customerId,
        'description': desc,
        'metadata': meta
    };

    return stripe.charges.create(charge).then(function (resp) {
        if (resp.paid) {
            return savePayment(teamId, pool);
        }
    }).catch(function (err) {
        return err && err.message || 'Payment error';
    });
}

model.pay = function (teamId, userId, billing, token, pool) {
    var stripe = new Stripe(config.stripe.secret),
        customer = {},
        meta = {
            'team_id': teamId,
            'user_id': userId,
            'street_line_1': billing.address_line1,
            'street_line_2': '',
            'city': billing.address_city,
            'country': billing.address_country,
            'postal_code': billing.address_zip,
            'state': '',
            'ip_address': billing.client_ip
        },
        amount = 0,
        customerId;

    return getCustomer(teamId, pool, stripe).then(function (resp) {
        customerId = resp;

        return getCustomerData(teamId, userId, pool);
    }).then(function (resp) {
        customer.description = billing.company;
        customer.email = resp.email;
        customer.metadata = meta;

        customer.source = token;

        amount = resp.amount;

        return stripe.customers.update(customerId, customer);
    }).then(function () {
        var desc;

        if (amount) {
            desc = 'Momentum subscription';
            return pay(teamId, pool, amount, customerId, desc, meta, stripe);
        }
        return 'success';
    }).catch(function (err) {
        return err && err.message || 'Payment error';
    });
};

model.getBilling = function (teamId, pool) {
    var stripe = new Stripe(config.stripe.secret);

    return db.q(q['get_stripe'], {
        'team_id': teamId
    }, pool).then(function (rows) {
        if (rows[0] && rows[0].stripe_id) {
            return stripe.customers.retrieve(rows[0].stripe_id);
        }

        return {};
    }).then(function (customer) {
        customer = customer || {};

        customer.metadata = customer.metadata || {};
        return {
            'company': customer.description || '',
            'address_city': customer.metadata.city || '',
            'address_country': customer.metadata.country || '',
            'address_line1': customer.metadata.street_line_1 || '',
            'address_zip': customer.metadata.postal_code || ''
        };
    });
};

module.exports = model;
