var time = require('@lib/utils/time'),
    dynamo = require('@lib/resources/dynamodb'),
    compress = require('@lib/utils/compress'),
    stats = {};

function getCatHash (teamId, cats) {
    var hash = [teamId],
        i = cats.length;

    while (i && !cats[i]) {
        i -= 1;
    }

    if (cats[i]) {
        hash.push(cats[i]);
    }

    return hash.join('-');
}

function getStats (items) {
    return dynamo.init().then(function (dynamodb) {
        return dynamo.getBatchItem(
            'cat-stat',
            items,
            dynamodb
        );
    }).then(function (posts) {
        var resp = {};

        posts.forEach(function (post) {
            resp[post.range] = post;
        });

        return resp;
    });
}

function viralLift (view, social) {
    if (!view || !social) {
        return 1;
    }

    return Math.round(
        (view) / (view - social) * 100
    ) / 100;
}

stats.get = function (teamId, cats, now) {
    var catHash = getCatHash(teamId, cats),
        to = time.toMinutes(5, 5, now),
        from = time.subtractOneDay(to),
        requests = [],
        i = to,
        ret = {
            'chart': {
                'data': {},
                'from': from
            },
            'stats': {
                'user': {
                    'sum': 0,
                    'values': {}
                },
                'view': {
                    'sum': 0,
                    'values': {}
                },
                'seed': {
                    'sum': 0,
                    'values': {}
                },
                'viral': {
                    'sum': 0,
                    'values': {}
                },
                'lift': {
                    'sum': 0,
                    'values': {}
                }
            }
        };

    for (; i >= from; i -= 300) {
        ret.chart.data[i] = {
            'seed': 0,
            'viral': 0
        };

        Object.keys(ret.stats).forEach(function (metric) {
            ret.stats[metric].values[i] = 0;
        });

        requests.push({
            'id': catHash,
            'range': String(i)
        });
    }

    return getStats(requests).then(function (statData) {
        Object.keys(statData).forEach(function (timestamp) {
            var stat = statData[timestamp];

            ret.chart.data[timestamp].seed += Number(
                statData[timestamp].seed
            ) || 0;

            ret.chart.data[timestamp].viral += Number(
                statData[timestamp].viral
            ) || 0;

            Object.keys(stat).forEach(function (metric) {
                if (ret.stats[metric]) {
                    ret.stats[metric].sum += Number(stat[metric]) || 0;
                    ret.stats[
                        metric
                    ].values[timestamp] = Number(stat[metric]) || 0;
                }
            });
        });

        ret.stats.user.values = compress.sumByCount(
            ret.stats.user.values,
            48
        );
        ret.stats.view.values = compress.sumByCount(
            ret.stats.view.values,
            48
        );
        ret.stats.seed.values = compress.sumByCount(
            ret.stats.seed.values,
            48
        );
        ret.stats.viral.values = compress.sumByCount(
            ret.stats.viral.values,
            48
        );

        ret.chart.data = compress.objectSumByCount(
            ret.chart.data,
            96
        );

        ret.stats.lift.sum =  viralLift(
            ret.stats.view.sum,
            ret.stats.seed.sum
        );

        ret.stats.lift.values = {};
        Object.keys(ret.stats.seed.values).forEach(function (key) {
            ret.stats.lift.values[key] = viralLift(
                ret.stats.view.values[key],
                ret.stats.seed.values[key]
            );
        });

        return ret;
    });
};

module.exports = stats;
