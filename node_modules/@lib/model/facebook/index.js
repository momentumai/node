var Promise = require('bluebird'),
    qs = require('querystring'),
    request = require('request'),
    config = require('@config'),
    sqlUtils = require('@lib/utils/sql'),
    path = require('path'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    db = require('@lib/resources/db'),
    auth = require('@lib/model/auth'),
    teamProperty = require('@lib/model/team/property'),
    Facebook = require('@lib/utils/facebook'),
    facebook = {};

facebook.token = function (
    teamId,
    userId,
    isAdmin,
    accessToken,
    now,
    pool
) {
    var params = {},
        url = 'https://graph.facebook.com/oauth/access_token?';

    if (!accessToken) {
        throw 'model/reports:400:accessToken is required';
    }

    params.grant_type = 'fb_exchange_token';
    params.client_id = config.facebook.appId;
    params.client_secret = config.facebook.secret;
    params.fb_exchange_token = accessToken;

    url += qs.stringify(params);

    return new Promise(function (resolve) {
        request.get(url, function (ignore, ignore2, body) {
            resolve(qs.parse(body));
        });
    }).then(function (data) {
        return Promise.all([
            auth.setUserData(
                userId,
                'facebook_access_token',
                data.access_token,
                pool
            ),
            auth.setUserData(
                userId,
                'facebook_expires',
                String(now + Number(data.expires) * 1000),
                pool
            )
        ]).then(function () {
            return {};
        });
    });
};

function getPermissions (accessToken) {
    return Facebook.get('me/permissions', accessToken).then(function (resp) {
        var ret = {};

        resp = resp || {};
        resp.data = resp.data || [];

        resp.data.forEach(function (item) {
            ret[item.permission] = item.status;
        });

        return ret;
    });
}

function validatePermissions (accessToken) {
    return getPermissions(accessToken).then(function (permissions) {
        var resp = '';

        config.frontend.facebook.scope.forEach(function (scope) {
            if (permissions[scope] !== 'granted') {
                resp = 'invalid_scope';
            }
        });

        return resp || 'valid';
    });
}

function validateAdAccount (accessToken, accountId) {
    return Facebook.get(
        'me/adaccounts?fields=id',
        accessToken
    ).then(function (resp) {
        var valid = 0;

        if (resp && resp.data) {
            resp.data.forEach(function (acc) {
                if (acc.id === accountId) {
                    valid = 1;
                }
            });
        }

        return valid;
    });
}

facebook.validateAdAccountRole = function (id, token) {
    var promises = {
        'roles': Facebook.get(id + '/users', token),
        'me': Facebook.get('me', token)
    };

    return Promise.props(promises).then(function (res) {
        var uid = res.me && res.me.id,
            roles = res.roles && res.roles.data || [],
            valid = 0;

        roles.forEach(function (role) {
            var perms;

            if (role && role.id && String(role.id) === String(uid)) {
                perms = role.permissions || [];

                if (perms.indexOf(2) !== -1 && perms.indexOf(3) !== -1) {
                    valid = 1;
                }
            }
        });

        return valid;
    });
};

facebook.validatePages = function (pages, token) {
    return Facebook.get('me/accounts', token).then(function (resp) {
        var valid = 1,
            userPages = {};

        if (resp && resp.data) {
            resp.data.forEach(function (item) {
                userPages[item.id] = item.perms;
            });
        }

        pages.forEach(function (page) {
            if (!userPages[page] ||
                userPages[page].indexOf('BASIC_ADMIN') === -1) {
                valid = 0;
            }
        });

        return valid;
    });
};

facebook.get = function (teamId, userId, pool) {
    return auth.listUserData(userId, pool).then(function (data) {
        var token = data['facebook_access_token'] || '';

        return validatePermissions(token);
    });
};

facebook.getAccessToken = function (userId, pool) {
    return db.q(q['get_token'], {
        'user_id': userId
    }, pool).then(function (rows) {
        return rows && rows[0] && rows[0].token || '';
    });
};

facebook.getAdAccount = function (teamId, userId, pool) {
    return Promise.props({
        'user': auth.getTeamUserData(
            teamId,
            userId,
            'fb_ads_account_id',
            pool
        ),
        'team': teamProperty.list(
            teamId,
            'fb_ads_account_id',
            pool
        )
    }).then(function (data) {
        if (!data.team.length) {
            return 0;
        }

        if (!data.user || data.team.indexOf(data.user) === -1) {
            return data.team[0];
        }

        return data.user;
    });
};

module.exports = facebook;
