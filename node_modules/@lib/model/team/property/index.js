var path = require('path'),
    db = require('@lib/resources/db'),
    Promise = require('bluebird'),
    sqlUtils = require('@lib/utils/sql'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    property = {};

property.list = function (teamId, name, pool) {
    name = db.escape(name);

    return db.q(q['team_property_list'], {
        'team_id': teamId,
        'name': name
    }, pool).then(function (rows) {
        var resp = [];

        rows.forEach(function (row) {
            resp.push(row.value);
        });

        return resp;
    });
};

property.add = function (teamId, name, value, parent, display, pool) {
    name = db.escape(name);
    value = db.escape(value);
    display = db.escape(display);
    parent = Number(parent) || 0;

    return db.q(q['team_property_add'], {
        'team_id': teamId,
        'name': name,
        'value': value,
        'display': display,
        'parent': parent
    }, pool);
};

property.removeRecursive = function (teamId, id, pool, onlyChild, childName) {
    id = Number(id);

    return db.q(q['team_property_get_id_by_parent'], {
        'parent': id,
        'team_id': teamId
    }, pool).then(function (rows) {
        var resp = [];

        rows.forEach(function (row) {
            if (!childName || childName === row.name) {
                resp.push(property.removeRecursive(teamId, row.id, pool));
            }
        });

        return Promise.all(resp);
    }).then(function () {
        if (!onlyChild) {
            return db.q(q['team_property_remove'], {'id': id}, pool);
        }
    });
};

property.getId = function (teamId, name, value, parent, pool) {
    name = db.escape(name);
    value = db.escape(value);
    parent = Number(parent) || 0;

    return db.q(q['team_property_get_id'], {
        'team_id': teamId,
        'name': name,
        'value': value,
        'parent': parent
    }, pool).then(function (rows) {
        return rows[0] && Number(rows[0].id) || 0;
    });
};

property.listWithChildren = function (teamId, name, children, pool) {
    name = db.escape(name);
    children = db.escape(children);

    return db.q(q['team_property_list_children'], {
        'team_id': teamId,
        'name': name,
        'children': children
    }, pool).then(function (rows) {
        var resp = {};

        rows.forEach(function (row) {
            resp[row.value] = resp[row.value] || {
                'display': row.display,
                'values': {}
            };
            if (row.child) {
                resp[row.value].values[row.child] = row.child_display;
            }
        });

        return resp;
    });
};

module.exports = property;
