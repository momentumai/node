var path = require('path'),
    URL = require('url'),
    Promise = require('bluebird'),
    db = require('@lib/resources/db'),
    time = require('@lib/utils/time'),
    dynamo = require('@lib/resources/dynamodb'),
    sqlUtils = require('@lib/utils/sql'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    content = {};

function transformCats (cats) {
    var ret = [];

    [0, 1, 2].forEach(function (i) {
        if (typeof cats[i] === 'undefined') {
            ret.push(0);
        } else {
            ret.push(cats[i]);
        }
    });

    return ret;
}

function getPromotedContents (items) {
    return dynamo.init().then(function (dynamodb) {
        return dynamo.getBatchItem(
            'post-cache',
            items,
            dynamodb
        );
    }).then(function (posts) {
        var resp = {};

        posts.forEach(function (post) {
            if (post && post.promoted) {
                resp[post.id] = 1;
            }
        });

        return resp;
    });
}

function getContentInfo (items) {
    return dynamo.init().then(function (dynamodb) {
        return dynamo.getBatchItem(
            'content',
            items,
            dynamodb
        );
    }).then(function (posts) {
        var resp = {};

        posts.forEach(function (post) {
            resp[post.id] = post;
        });

        return resp;
    });
}

function getPageviews (items) {
    return dynamo.init().then(function (dynamodb) {
        return dynamo.getBatchItem(
            'content-stat',
            items,
            dynamodb
        );
    }).then(function (posts) {
        var resp = {};

        posts.forEach(function (post) {
            resp[post.id] = resp[post.id] || {};
            resp[post.id][post.range] = post.view;
        });

        return resp;
    });
}

function getPostHandler (teamId, params, response) {
    return function (rows) {
        var promotedRequest = [],
            contentRequest = [],
            pwRequest = [],
            promises = {};

        rows.forEach(function (row) {
            var start = time.roundDownToHour(params.to),
                i = start;

            row.pageviews = {};

            for (; i >= start - 24 * 3600; i -= 3600) {
                row.pageviews[i] = 0;
                pwRequest.push({
                    'id': [
                        teamId,
                        String(row.id)
                    ].join('-'),
                    'range': 'H' + String(i)
                });
            }

            promotedRequest.push({
                'id': row.url,
                'range': '1'
            });

            contentRequest.push({
                'id': [
                    teamId,
                    String(row.id)
                ].join('-'),
                'range': '1'
            });

            response['data'].push(row);
        });

        promises['promoted'] = getPromotedContents(promotedRequest);
        promises['info'] = getContentInfo(contentRequest);
        promises['pw'] = getPageviews(pwRequest);

        promises['promoted'].then(function (promoted) {
            response['data'].forEach(function (post) {
                if (promoted && promoted[post.url]) {
                    post.promoted = 1;
                }
            });
        });

        promises['info'].then(function (info) {
            response['data'].forEach(function (post) {
                var hash = [
                    teamId,
                    post.id
                ].join('-');

                if (info[hash]) {
                    if (info[hash].title) {
                        post.title = new Buffer(
                            info[hash].title,
                            'base64'
                        ).toString('utf8');
                    }
                    if (info[hash].img) {
                        post.img = decodeURIComponent(info[hash].img);
                    }

                    if (info[hash].url) {
                        post.realUrl = decodeURIComponent(info[hash].url);
                    }
                }
            });
        });

        promises['pw'].then(function (pw) {
            response['data'].forEach(function (post) {
                var hash = [
                    teamId,
                    post.id
                ].join('-');

                Object.keys(pw[hash] || {}).forEach(function (hour) {
                    post.pageviews[hour.replace('H', '')] = pw[hash][hour];
                });
                post.pageviews = Object.keys(
                    post.pageviews
                ).sort(function (a, b) {
                    return Number(a) - Number(b);
                }).reduce(function (a, v) {
                    a.push(post.pageviews[v]);
                    return a;
                }, []);
            });
        });

        return Promise.props(promises).then(function () {
            response.data.forEach(function (item) {
                if (item.realUrl) {
                    item.url = item.realUrl;
                    delete item.realUrl;
                }
            });
        });
    };
}

content.list = function (teamId, now, interval, limit, cats, pool) {
    var params = {
            'team_id': teamId,
            'to': time.toMinutes(5, 5, now),
            'limit': Number(limit) || 20,
            'cats': cats,
            'alertCats': transformCats(cats)
        },
        response = {
            'data': [],
            'interval': interval
        };

    params.from = params.to - interval;

    return db.q(q['list'], params, pool).then(
        getPostHandler(teamId, params, response)
    ).then(function () {
        return response;
    });
};

content.recommended = function (teamId, now, interval, limit, cats, pool) {
    var params = {},
        response = {
            'data': [],
            'from': params.from,
            'interval': interval
        };

    params.team_id = teamId;
    params.to = time.toMinutes(5, 5, now);
    params.from = params.to - interval;
    params.cats = cats;
    params.alertCats = transformCats(cats);
    params.limit = Number(limit) || 20;

    return db.q(q['recommend'], params, pool).then(
        getPostHandler(teamId, params, response)
    ).then(function () {
        return response;
    });
};

content.get = function (teamId, now, interval, url, cats, pool) {
    var params = {},
        response = {
            'data': [],
            'from': params.from,
            'interval': interval
        };

    params.team_id = teamId;
    params.to = time.toMinutes(5, 5, now);
    params.from = params.to - interval;
    params.cats = cats;
    params.alertCats = transformCats(cats);

    url = URL.parse(url);
    url = url.host + url.pathname;
    url = db.escape(url).substr(0, 255);

    params.url = url;

    return db.q(q['by_url'], params, pool).then(
        getPostHandler(teamId, params, response)
    ).then(function () {
        if (response.data[0]) {
            return response.data[0];
        }
        throw 'N/A';
    });
};

module.exports = content;
