var toplist = require('@lib/model/toplist'),
    path = require('path'),
    db = require('@lib/resources/db'),
    sqlUtils = require('@lib/utils/sql'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    Promise = require('bluebird'),
    memcached = require('@lib/resources/memcached'),
    list = {};

function getAlerts (teamId, cats, now, pool) {
    return db.q(q['alerts'], {
        'team_id': teamId,
        'cats': cats,
        'to': now
    }, pool);
}

function isPromoted (teamId, url, memc) {
    return memcached.get({
        'team_id': teamId,
        'type': 'fb-url-cache',
        'key': url
    }, memc).then(function (value) {
        if (value && Object.keys(value).length) {
            return Number(value.promoted) && 1 || 0;
        }
        return 0;
    });
}

list.get = function (teamId, cats, now, pool) {
    return Promise.join(
        getAlerts(teamId, cats, now, pool),
        toplist.get(teamId, cats, now).then(function (tl) {
            return memcached.init().then(function (memc) {
                var promises = {};

                tl.forEach(function (elem) {
                    promises[elem.url] = isPromoted(teamId, elem.url, memc);
                });

                return Promise.props(promises).then(function (pMap) {
                    tl.forEach(function (elem) {
                        elem.promoted = pMap[elem.url];
                    });
                    return tl;
                });
            });
        }),
        function (alerts, tl) {
            tl.forEach(function (elem) {
                var alert = alerts.filter(function (a) {
                    return a.content_id === elem.contentId;
                })[0] || {};

                if (alert.content_id) {
                    elem.recommended = 1;
                }
            });

            return tl;
        }
    );
};

module.exports = list;
