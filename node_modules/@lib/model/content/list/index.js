var toplist = require('@lib/model/toplist'),
    contentInfo = require('@lib/model/content/info'),
    path = require('path'),
    db = require('@lib/resources/db'),
    datastore = require('@lib/resources/datastore'),
    sqlUtils = require('@lib/utils/sql'),
    urlUtils = require('@lib/utils/url'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    Promise = require('bluebird'),
    memcached = require('@lib/resources/memcached'),
    URL = require('url'),
    list = {};

function getAlerts (teamId, cats, now, pool) {
    return db.q(q['alerts'], {
        'team_id': teamId,
        'cats': cats,
        'to': now
    }, pool);
}

function isPromoted (teamId, url, memc) {
    return memcached.get({
        'team_id': teamId,
        'type': 'fb-url-cache',
        'key': url
    }, memc).then(function (value) {
        if (value && Object.keys(value).length) {
            return Number(value.promoted) && 1 || 0;
        }
        return 0;
    });
}

list.get = function (teamId, cats, now, pool) {
    return Promise.join(
        getAlerts(teamId, cats, now, pool),
        toplist.get(teamId, cats, now).then(function (tl) {
            return memcached.init().then(function (memc) {
                var promises = {};

                tl.forEach(function (elem) {
                    promises[elem.url] = isPromoted(teamId, elem.url, memc);
                });

                return Promise.props(promises).then(function (pMap) {
                    tl.forEach(function (elem) {
                        elem.promoted = pMap[elem.url];
                    });
                    return tl;
                });
            });
        }),
        function (alerts, tl) {
            tl.forEach(function (elem) {
                var alert = alerts.filter(function (a) {
                    return a.content_id === elem.contentId;
                })[0] || {};

                if (alert.content_id) {
                    elem.recommended = 1;
                }
            });

            return tl;
        }
    );
};

function getAlert () {
    return {};
}

function getContent (teamId, url, contentId) {
    console.log(arguments1);
    return contentInfo.get(teamId, contentId).then(function (ogdata) {
        var shareLink = urlUtils.addShareParams(url);

        return {
            'contentId': contentId,
            'momentum': 0,
            'ogdata': ogdata,
            'shareLink': shareLink,
            'fromUrl': 1,
            'url': url
        };
    });
}

list.url = function (teamId, url, cats, now, pool) {
    var parsed;

    url = db.escape(url);

    parsed = URL.parse(url);
    parsed.protocol = '';

    url = URL.format(parsed).substr(2);

    return datastore.get(teamId, 'Content', url).then(function (res) {
        return res && res.content_id;
    }).then(function (contentId) {
        if (!contentId) {
            return null;
        }
        return Promise.join(
            getAlert(teamId, contentId, cats, now, pool),
            memcached.init().then(function (memc) {
                return isPromoted(teamId, url, memc);
            }),
            getContent(teamId, url, contentId),
            function (alert, promoted, content) {
                if (alert) {
                    content.recommended = 1;
                }

                if (promoted) {
                    content.promoted = 1;
                }

                return content;
            }
        );
    });
};

module.exports = list;
