var toplist = require('@lib/model/toplist'),
    contentInfo = require('@lib/model/content/info'),
    path = require('path'),
    db = require('@lib/resources/db'),
    datastore = require('@lib/resources/datastore'),
    sqlUtils = require('@lib/utils/sql'),
    urlUtils = require('@lib/utils/url'),
    time = require('@lib/utils/time'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    Promise = require('bluebird'),
    URL = require('url'),
    list = {};

function getAlerts (teamId, cats, now, pool) {
    return db.q(q['alerts'], {
        'team_id': teamId,
        'cats': cats,
        'to': now
    }, pool);
}

function filterCats (cats) {
    return cats.filter(function (cat) {
        return cat !== 'NONE';
    });
}

function getPromotions (teamId, cats, now, pool) {
    return db.q(q['promotions'], {
        'team_id': teamId,
        'cats': filterCats(cats),
        'to': now
    }, pool);
}

list.get = function (teamId, cats, now, pool) {
    var to = time.toMinutes(5, 10, now);

    return Promise.join(
        getAlerts(teamId, cats, to, pool),
        getPromotions(teamId, cats, now, pool),
        toplist.get(teamId, cats, to),
        function (alerts, promotions, tl) {
            tl.forEach(function (elem) {
                var alert = alerts.filter(function (a) {
                        return a.content_id === elem.contentId;
                    })[0] || {},
                    promotion = promotions.filter(function (p) {
                        return p.content_id === elem.contentId;
                    })[0] || {};

                if (alert.content_id) {
                    elem.recommended = 1;
                }

                if (promotion.content_id) {
                    elem.promoted = 1;
                }
            });

            return tl;
        }
    );
};

function getContent (teamId, url, contentId) {
    return contentInfo.get(teamId, contentId).then(function (ogdata) {
        var shareLink = urlUtils.addShareParams(url);

        return {
            'contentId': contentId,
            'momentum': 0,
            'ogdata': ogdata,
            'shareLink': shareLink,
            'fromUrl': 1,
            'url': url
        };
    });
}

function isPromoted (teamId, contentId, cats, now, pool) {
    return db.q(q['promoted'], {
        'team_id': teamId,
        'content_id': contentId,
        'cats': filterCats(cats),
        'to': now
    }, pool).then(function (res) {
        return res.length;
    });
}

list.url = function (teamId, url, cats, now, pool) {
    var parsed;

    url = db.escape(url);

    parsed = URL.parse(url);

    url = [
        parsed.host,
        parsed.port ? ':' + parsed.port : '',
        parsed.pathname
    ].join('');

    return datastore.get(teamId, 'Content', url).then(function (res) {
        return res && res.content_id;
    }).then(function (contentId) {
        if (!contentId) {
            return {};
        }
        return Promise.join(
            isPromoted(teamId, contentId, cats, now, pool),
            getContent(teamId, url, contentId),
            function (promoted, content) {
                if (promoted) {
                    content.promoted = 1;
                }

                return content;
            }
        );
    });
};

module.exports = list;
