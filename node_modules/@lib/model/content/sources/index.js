var path = require('path'),
    dynamo = require('@lib/resources/dynamodb'),
    Promise = require('bluebird'),
    db = require('@lib/resources/db'),
    extend = require('extend'),
    time = require('@lib/utils/time'),
    sqlUtils = require('@lib/utils/sql'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    sources = {};

function calcHistory (teamId, contentId, dynamodb, type) {
    return dynamo.getItem(
        'content-traffic',
        [teamId, contentId].join('-'),
        type,
        dynamodb
    ).then(function (result) {
        var sources = {},
            sum = {
                'seed': 0,
                'viral': 0
            };

        delete result.id;
        delete result.range;

        Object.keys(result).forEach(function (key) {
            var item = key.split('-'),
                shareType = (item.shift() === 's') ? 'seed' : 'viral',
                source = item.join('-');

            sources[source] = sources[source] || {
                'seed': 0,
                'viral': 0
            };

            sources[source][shareType] += Number(result[key]) || 0;
            sum[shareType] += Number(result[key]) || 0;
        });

        return {
            'sources': sources,
            'seed': sum.seed,
            'viral': sum.viral
        };
    });
}

sources.history = function (teamId, contentId) {
    var types = ['organic', 'team', 'paid'];

    return dynamo.init().then(function (dynamodb) {
        var promises = {};

        types.forEach(function (type) {
            promises[type] = calcHistory(teamId, contentId, dynamodb, type);
        });

        return Promise.props(promises);
    });
};

function calcStat (params, pool) {
    return db.q(q['get_source_stat'], params, pool).then(function (rows) {
        return Number(rows[0] && rows[0].sum) || 0;
    });
}

function calcTop (params, pool) {
    return db.q(q['get_top_source'], params, pool).then(function (rows) {
        return rows[0] && rows[0].source || '';
    });
}

function getType (type) {
    if (type === 'paid') {
        return 3;
    }
    if (type === 'team') {
        return 2;
    }
    return 1;
}

sources.get = function (teamId, contentId, now, pool) {
    var types = ['organic', 'team', 'paid'],
        params = {},
        promises = {};

    params.to = time.toMinutes(5, 5, now);
    params.from = time.subtractOneDay(params.to);
    params.team_id = teamId;
    params.content_id = contentId;

    types.forEach(function (type) {
        promises[type + '-stat'] = calcStat(
            extend({'traffic_type': getType(type)}, params),
            pool
        );
        promises[type + '-top'] = calcTop(
            extend({'traffic_type': getType(type)}, params),
            pool
        );
    });

    return Promise.props(promises);
};

module.exports = sources;
