var path = require('path'),
    gcm = require('node-gcm'),
    Promise = require('bluebird'),
    config = require('@config'),
    infoModel = require('@lib/model/content/info'),
    ds = require('@lib/resources/datastore'),
    catsUtils = require('@lib/utils/category'),
    sqlUtils = require('@lib/utils/sql'),
    db = require('@lib/resources/db'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    notif = {};

function getRegistrationId (endpoint) {
    return endpoint.replace('https://android.googleapis.com/gcm/send/', '');
}

notif.addToken = function (userId, endpoint) {
    var registrationId = getRegistrationId(endpoint);

    return ds.get(null, 'User', String(userId)).then(function (user) {
        user = user || {};
        user['registration_ids'] = user['registration_ids'] || [];

        if (user['registration_ids'].indexOf(registrationId) !== -1) {
            return;
        }
        user['registration_ids'].push(registrationId);

        return ds.set(null, 'User', String(userId), user, ['registration_ids']);
    }).then(function () {
        return 1;
    });
};

notif.removeToken = function (userId, registrationId) {
    return ds.get(null, 'User', String(userId)).then(function (user) {
        user = user || {};
        user['registration_ids'] = user['registration_ids'] || [];

        user['registration_ids'] = user['registration_ids']
            .filter(function (id) {
                return id !== registrationId;
            });

        return ds.set(null, 'User', String(userId), user, ['registration_ids']);
    }).then(function () {
        return 1;
    });
};

notif.getToken = function (userId) {
    return ds.get(null, 'User', String(userId)).then(function (user) {
        user = user || {};
        user['registration_ids'] = user['registration_ids'] || [];

        return user['registration_ids'].sort()
        .filter(function (item, pos, ary) {
            return !pos || item !== ary[pos - 1];
        });
    });
};

notif.validUser = function (userId, token) {
    return notif.getToken(userId).then(function (tokens) {
        return tokens.indexOf(token) !== -1;
    });
};

notif.fetch = function (userId, endpoint) {
    var token = getRegistrationId(endpoint);

    return notif.validUser(userId, token).then(function (valid) {
        if (!valid) {
            return [];
        }
        return ds.init().then(function (datastore) {
            var query = datastore.createQuery('Notification');

            query.filter('registrationToken', token);

            return ds.runQuery(query, datastore);
        });
    }).then(function (items) {
        return ds.delete(null, 'Notification', items.map(function (item) {
            return item.key.name;
        })).then(function () {
            return items.map(function (item) {
                return {
                    'data': item.data.data,
                    'params': item.data.params
                };
            });
        });
    });
};

notif.remove = function (registrationToken, collapseKey) {
    return ds.init().then(function (datastore) {
        var query = datastore.createQuery('Notification');

        query.filter('collapseKey', collapseKey);
        query.filter('registrationToken', registrationToken);

        return ds.runQuery(query, datastore);
    }).then(function (items) {
        ds.delete(null, 'Notification', items.map(function (item) {
            return item.key.name;
        }));
    });
};

notif.send = function (registrationTokens, params, data) {
    var setData = registrationTokens.map(function (token) {
        return {
            'data': {
                'registrationToken': token,
                'collapseKey': data.id,
                'params': params,
                'data': data
            }
        };
    });

    return ds.setMulti(null, 'Notification', setData, [
        'params',
        'data'
    ]).then(function () {
        return notif.sendGcm(registrationTokens, params, data);
    });
};

notif.sendGcm = function (registrationTokens, params, data) {
    return new Promise(function (resolve, reject) {
        var message = new gcm.Message({
                'collapseKey': data.id,
                'priority': 'normal',
                'contentAvailable': true,
                'timeToLive': 1,
                'dryRun': config.gcm.dryRun,
                'data': data,
                'notification': {
                    'title': params.title,
                    'icon': 'images/icon64.png',
                    'body': params.body
                }
            }),
            sender = new gcm.Sender(config.gcm.apiKey);

        console.error('GCM key: ', config.gcm.apiKey);

        sender.send(message, {
            'registrationTokens': registrationTokens
        }, 5, function (err, response) {
            if (err) {
                console.error('GCM Error response:', response);
                console.error('GCM Error:', err);
                return reject(err);
            }
            console.error('GCM Success:', response);
            return resolve(response);
        });
    });
};

notif.sendForTeam = function (params, pool) {
    var cats = [],
        ids = [];

    cats.push(params.cat1 || 'NONE');
    cats.push(params.cat2 || 'NONE');
    cats.push(params.cat3 || 'NONE');
    params.team_id = parseInt(params.team_id);

    return db.q(q['get_users'], params, pool).then(function (rows) {
        var promises = rows.map(function (item) {
            item.cats = JSON.parse(item.cats || '[]') || [];
            catsUtils.extend(item.cats);
            return item;
        }).filter(function (item) {
            return catsUtils.compare(item.cats, cats);
        }).reduce(function (prev, act) {
            prev.push(notif.getToken(act.user_id));
            return prev;
        }, []);

        return Promise.all(promises);
    }).then(function (resp) {
        ids = [].concat.apply([], resp);

        if (ids.length) {
            return infoModel.get(params.team_id, params.content_id);
        }
    }).then(function (info) {
        var url = [
            config.frontend.docBase,
            '/#/dashboard/main/content/',
            params.content_id
        ].join('');

        if (ids.length) {
            return notif.send(ids, {
                'title': 'You should promote this content',
                'body': info.title
            }, {
                'id': params.content_id,
                'type': 'add',
                'url': url
            });
        }
    }).then(function () {
        return 'notifications sent';
    });
};

notif.removeForTeam = function (params, pool) {
    var cats = [];

    cats.push(params.cat1 || 'NONE');
    cats.push(params.cat2 || 'NONE');
    cats.push(params.cat3 || 'NONE');
    params.team_id = parseInt(params.team_id);

    return db.q(q['get_users'], params, pool).then(function (rows) {
        var promises = rows.map(function (item) {
            item.cats = JSON.parse(item.cats || '[]') || [];
            catsUtils.extend(item.cats);
            return item;
        }).filter(function (item) {
            return catsUtils.compare(item.cats, cats);
        }).reduce(function (prev, act) {
            prev.push(notif.getToken(act.user_id));
            return prev;
        }, []);

        return Promise.all(promises);
    }).then(function (resp) {
        var promises = [].concat.apply([], resp).map(function (id) {
            return notif.remove(id, params.content_id);
        });

        return Promise.all(promises);
    }).then(function () {
        return 'notifications removed';
    });
};

module.exports = notif;
