var path = require('path'),
    db = require('@lib/resources/db'),
    Promise = require('bluebird'),
    sqlUtils = require('@lib/utils/sql'),
    q = sqlUtils.getQueries(path.join(__dirname, 'sql')),
    Facebook = require('@lib/utils/facebook'),
    facebookModel = require('@lib/model/facebook'),
    property = {};

property.list = function (token) {
    var promises = {};

    promises.pages = property.fbPages(token);
    promises.adaccounts = property.fbAdAccounts(token);
    promises.businesses = property.fbBusinesses(token);

    return Promise.props(promises);
};

function insertRecord (userId, teamId, record, token, pool) {
    return Promise.resolve().then(function () {
        if (record.type === 'page') {
            return facebookModel.validatePages([record.value || ''], token);
        }
        return facebookModel.validateAdAccountRole(record.value || '', token);
    }).then(function (valid) {
        if (valid && record.value) {
            return db.q(q['add'], {
                'team_id': teamId,
                'user_id': userId,
                'type': (record.type === 'page') ? 1 : 2,
                'value': record.value,
                'display': record.display || '',
                'is_default': (record.default) ? 1 : 0
            }, pool);
        }
    }).catch(function () {
        return {};
    });
}

property.get = function (teamId, userId, pool) {
    return db.q(q['get'], {
        'team_id': teamId,
        'user_id': userId
    }, pool).then(function (rows) {
        var resp = [];

        rows.forEach(function (row) {
            resp.push({
                'type': (Number(row.type) === 1) ? 'page' : 'adaccount',
                'value': row.value,
                'display': row.display_value,
                'default': Boolean(Number(row.is_default) === 1)
            });
        });

        return resp;
    });
};

property.insert = function (teamId, userId, values, token, pool) {
    return db.q(q['remove'], {
        'team_id': teamId,
        'user_id': userId
    }, pool).then(function () {
        var promises = [];

        (values || []).forEach(function (item) {
            item.type = item.type || '';
            if (['page', 'adaccount'].indexOf(item.type) !== -1) {
                promises.push(insertRecord(userId, teamId, item, token, pool));
            }
        });

        return Promise.all(promises);
    });
};

property.import = function (teamId, userId, businessId, token, pool) {
    return Facebook.get(
        businessId +
        '?fields=adaccounts{name,id},pages{name,id}',
        token
    ).then(function (res) {
        var req = [];

        res.adaccounts.data.forEach(function (datum, index) {
            req.push({
                'type': 'adaccount',
                'value': datum.id,
                'display': datum.name
            });

            if (!index) {
                req[req.length - 1].default = true;
            }
        });

        res.pages.data.forEach(function (datum, index) {
            req.push({
                'type': 'page',
                'value': datum.id,
                'display': datum.name
            });

            if (!index) {
                req[req.length - 1].default = true;
            }
        });

        return property.insert(teamId, userId, req, token, pool);
    });
};

property.fbAdAccounts = function (token) {
    return Facebook.get(
        'me?fields=adaccounts{name,id}',
        token
    ).then(function (resp) {
        var ret = {};

        if (resp.adaccounts && resp.adaccounts.data) {
            resp.adaccounts.data.forEach(function (item) {
                ret[item.id] = item.name;
            });
        }

        return ret;
    });
};

property.fbPages = function (token) {
    return Facebook.get(
        'me?fields=accounts{name,id}',
        token
    ).then(function (resp) {
        var ret = {};

        if (resp.accounts && resp.accounts.data) {
            resp.accounts.data.forEach(function (item) {
                ret[item.id] = item.name;
            });
        }

        return ret;
    });
};

property.fbBusinesses = function (token) {
    return Facebook.get(
        'me?fields=businesses',
        token
    ).then(function (resp) {
        var ret = {};

        if (resp.businesses && resp.businesses.data) {
            resp.businesses.data.forEach(function (item) {
                ret[item.id] = item.name;
            });
        }

        return ret;
    });
};

module.exports = property;
